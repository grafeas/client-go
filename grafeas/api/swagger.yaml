---
swagger: "2.0"
info:
  version: "version not set"
  title: "grafeas.proto"
tags:
- name: "GrafeasV1Beta1"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /v1beta1/{name_1}:
    get:
      tags:
      - "GrafeasV1Beta1"
      summary: "Gets the specified note."
      operationId: "GrafeasV1Beta1_GetNote"
      parameters:
      - name: "name_1"
        in: "path"
        description: "The name of the note in the form of\n`projects/[PROVIDER_ID]/notes/[NOTE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/notes/[^/]+"
        x-exportParamName: "Name1"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1Note"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "GrafeasV1Beta1"
      summary: "Deletes the specified note."
      operationId: "GrafeasV1Beta1_DeleteNote"
      parameters:
      - name: "name_1"
        in: "path"
        description: "The name of the note in the form of\n`projects/[PROVIDER_ID]/notes/[NOTE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/notes/[^/]+"
        x-exportParamName: "Name1"
      responses:
        "200":
          description: "A successful response."
          schema: {}
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    patch:
      tags:
      - "GrafeasV1Beta1"
      summary: "Updates the specified note."
      operationId: "GrafeasV1Beta1_UpdateNote"
      parameters:
      - name: "name_1"
        in: "path"
        description: "The name of the note in the form of\n`projects/[PROVIDER_ID]/notes/[NOTE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/notes/[^/]+"
        x-exportParamName: "Name1"
      - in: "body"
        name: "body"
        description: "The updated note."
        required: true
        schema:
          $ref: "#/definitions/v1beta1Note"
        x-exportParamName: "Body"
      - name: "updateMask"
        in: "query"
        description: "The fields to update."
        required: false
        type: "string"
        x-exportParamName: "UpdateMask"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1Note"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{name}:
    get:
      tags:
      - "GrafeasV1Beta1"
      summary: "Gets the specified occurrence."
      operationId: "GrafeasV1Beta1_GetOccurrence"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the occurrence in the form of\n`projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/occurrences/[^/]+"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1Occurrence"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "GrafeasV1Beta1"
      summary: "Deletes the specified occurrence. For example, use this method to\
        \ delete an\noccurrence when the occurrence is no longer applicable for the\
        \ given\nresource."
      operationId: "GrafeasV1Beta1_DeleteOccurrence"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the occurrence in the form of\n`projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/occurrences/[^/]+"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema: {}
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    patch:
      tags:
      - "GrafeasV1Beta1"
      summary: "Updates the specified occurrence."
      operationId: "GrafeasV1Beta1_UpdateOccurrence"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the occurrence in the form of\n`projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/occurrences/[^/]+"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        description: "The updated occurrence."
        required: true
        schema:
          $ref: "#/definitions/v1beta1Occurrence"
        x-exportParamName: "Body"
      - name: "updateMask"
        in: "query"
        description: "The fields to update."
        required: false
        type: "string"
        x-exportParamName: "UpdateMask"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1Occurrence"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{name}/notes:
    get:
      tags:
      - "GrafeasV1Beta1"
      summary: "Gets the note attached to the specified occurrence. Consumer projects\
        \ can\nuse this method to get a note that belongs to a provider project."
      operationId: "GrafeasV1Beta1_GetOccurrenceNote"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the occurrence in the form of\n`projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/occurrences/[^/]+"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1Note"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{name}/occurrences:
    get:
      tags:
      - "GrafeasV1Beta1"
      summary: "Lists occurrences referencing the specified note. Provider projects\
        \ can use\nthis method to get all occurrences across consumer projects referencing\
        \ the\nspecified note."
      operationId: "GrafeasV1Beta1_ListNoteOccurrences"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the note to list occurrences for in the form of\n\
          `projects/[PROVIDER_ID]/notes/[NOTE_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+/notes/[^/]+"
        x-exportParamName: "Name"
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "pageSize"
        in: "query"
        description: "Number of occurrences to return in the list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "pageToken"
        in: "query"
        description: "Token to provide to skip to a particular spot in the list."
        required: false
        type: "string"
        x-exportParamName: "PageToken"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1ListNoteOccurrencesResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{parent}/notes:
    get:
      tags:
      - "GrafeasV1Beta1"
      summary: "Lists notes for the specified project."
      operationId: "GrafeasV1Beta1_ListNotes"
      parameters:
      - name: "parent"
        in: "path"
        description: "The name of the project to list notes for in the form of\n`projects/[PROJECT_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+"
        x-exportParamName: "Parent"
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "pageSize"
        in: "query"
        description: "Number of notes to return in the list. Must be positive. Max\
          \ allowed page\nsize is 1000. If not specified, page size defaults to 20."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "pageToken"
        in: "query"
        description: "Token to provide to skip to a particular spot in the list."
        required: false
        type: "string"
        x-exportParamName: "PageToken"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1ListNotesResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "GrafeasV1Beta1"
      summary: "Creates a new note."
      operationId: "GrafeasV1Beta1_CreateNote"
      parameters:
      - name: "parent"
        in: "path"
        description: "The name of the project in the form of `projects/[PROJECT_ID]`,\
          \ under which\nthe note is to be created."
        required: true
        type: "string"
        pattern: "projects/[^/]+"
        x-exportParamName: "Parent"
      - in: "body"
        name: "body"
        description: "The note to create."
        required: true
        schema:
          $ref: "#/definitions/v1beta1Note"
        x-exportParamName: "Body"
      - name: "noteId"
        in: "query"
        description: "The ID to use for this note."
        required: true
        type: "string"
        x-exportParamName: "NoteId"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1Note"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{parent}/notes:batchCreate:
    post:
      tags:
      - "GrafeasV1Beta1"
      summary: "Creates new notes in batch."
      operationId: "GrafeasV1Beta1_BatchCreateNotes"
      parameters:
      - name: "parent"
        in: "path"
        description: "The name of the project in the form of `projects/[PROJECT_ID]`,\
          \ under which\nthe notes are to be created."
        required: true
        type: "string"
        pattern: "projects/[^/]+"
        x-exportParamName: "Parent"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1BatchCreateNotesResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{parent}/occurrences:
    get:
      tags:
      - "GrafeasV1Beta1"
      summary: "Lists occurrences for the specified project."
      operationId: "GrafeasV1Beta1_ListOccurrences"
      parameters:
      - name: "parent"
        in: "path"
        description: "The name of the project to list occurrences for in the form\
          \ of\n`projects/[PROJECT_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+"
        x-exportParamName: "Parent"
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "pageSize"
        in: "query"
        description: "Number of occurrences to return in the list. Must be positive.\
          \ Max allowed\npage size is 1000. If not specified, page size defaults to\
          \ 20."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "pageToken"
        in: "query"
        description: "Token to provide to skip to a particular spot in the list."
        required: false
        type: "string"
        x-exportParamName: "PageToken"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1ListOccurrencesResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "GrafeasV1Beta1"
      summary: "Creates a new occurrence."
      operationId: "GrafeasV1Beta1_CreateOccurrence"
      parameters:
      - name: "parent"
        in: "path"
        description: "The name of the project in the form of `projects/[PROJECT_ID]`,\
          \ under which\nthe occurrence is to be created."
        required: true
        type: "string"
        pattern: "projects/[^/]+"
        x-exportParamName: "Parent"
      - in: "body"
        name: "body"
        description: "The occurrence to create."
        required: true
        schema:
          $ref: "#/definitions/v1beta1Occurrence"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1Occurrence"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{parent}/occurrences:batchCreate:
    post:
      tags:
      - "GrafeasV1Beta1"
      summary: "Creates new occurrences in batch."
      operationId: "GrafeasV1Beta1_BatchCreateOccurrences"
      parameters:
      - name: "parent"
        in: "path"
        description: "The name of the project in the form of `projects/[PROJECT_ID]`,\
          \ under which\nthe occurrences are to be created."
        required: true
        type: "string"
        pattern: "projects/[^/]+"
        x-exportParamName: "Parent"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_1"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1BatchCreateOccurrencesResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v1beta1/{parent}/occurrences:vulnerabilitySummary:
    get:
      tags:
      - "GrafeasV1Beta1"
      summary: "Gets a summary of the number and severity of occurrences."
      operationId: "GrafeasV1Beta1_GetVulnerabilityOccurrencesSummary"
      parameters:
      - name: "parent"
        in: "path"
        description: "The name of the project to get a vulnerability summary for in\
          \ the form of\n`projects/[PROJECT_ID]`."
        required: true
        type: "string"
        pattern: "projects/[^/]+"
        x-exportParamName: "Parent"
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1beta1VulnerabilityOccurrencesSummary"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
definitions:
  AliasContextKind:
    type: "string"
    description: "The type of an alias.\n\n - KIND_UNSPECIFIED: Unknown.\n - FIXED:\
      \ Git tag.\n - MOVABLE: Git branch.\n - OTHER: Used to specify non-standard\
      \ aliases. For example, if a Git repo has a\nref named \"refs/foo/bar\"."
    enum:
    - "KIND_UNSPECIFIED"
    - "FIXED"
    - "MOVABLE"
    - "OTHER"
    default: "KIND_UNSPECIFIED"
  AssessmentJustification:
    type: "object"
    properties:
      justificationType:
        description: "The justification type for this vulnerability."
        $ref: "#/definitions/JustificationJustificationType"
      details:
        type: "string"
        description: "Additional details on why this justification was chosen."
    description: "Justification provides the justification when the state of the\n\
      assessment if NOT_AFFECTED."
    example:
      justificationType: {}
      details: "details"
  AssessmentRemediation:
    type: "object"
    properties:
      remediationType:
        description: "The type of remediation that can be applied."
        $ref: "#/definitions/RemediationRemediationType"
      remediationTime:
        type: "string"
        format: "date-time"
        description: "Contains the date from which the remediation is available."
      details:
        type: "string"
        description: "Contains a comprehensive human-readable discussion of the remediation."
      remediationUri:
        description: "Contains the URL where to obtain the remediation."
        $ref: "#/definitions/v1beta1RelatedUrl"
    description: "Specifies details on how to handle (and presumably, fix) a vulnerability."
    example:
      remediationType: {}
      remediationUri:
        label: "label"
        url: "url"
      details: "details"
      remediationTime: "2000-01-23T04:56:07.000+00:00"
  AssessmentState:
    type: "string"
    description: "Provides the state of this Vulnerability assessment.\n\n - STATE_UNSPECIFIED:\
      \ No state is specified.\n - AFFECTED: This product is known to be affected\
      \ by this vulnerability.\n - NOT_AFFECTED: This product is known to be not affected\
      \ by this vulnerability.\n - FIXED: This product contains a fix for this vulnerability.\n\
      \ - UNDER_INVESTIGATION: It is not known yet whether these versions are or are\
      \ not affected\nby the vulnerability. However, it is still under investigation."
    enum:
    - "STATE_UNSPECIFIED"
    - "AFFECTED"
    - "NOT_AFFECTED"
    - "FIXED"
    - "UNDER_INVESTIGATION"
    default: "STATE_UNSPECIFIED"
  AuthorityHint:
    type: "object"
    properties:
      humanReadableName:
        type: "string"
        description: "Required. The human readable name of this attestation authority,\
          \ for\nexample \"qa\"."
    description: "This submessage provides human-readable hints about the purpose\
      \ of the\nauthority. Because the name of a note acts as its resource reference,\
      \ it is\nimportant to disambiguate the canonical name of the Note (which might\
      \ be a\nUUID for security purposes) from \"readable\" names more suitable for\
      \ debug\noutput. Note that these hints should not be used to look up authorities\
      \ in\nsecurity sensitive contexts, such as when looking up attestations to\n\
      verify."
    example:
      humanReadableName: "humanReadableName"
  BuildSignatureKeyType:
    type: "string"
    description: "Public key formats.\n\n - KEY_TYPE_UNSPECIFIED: `KeyType` is not\
      \ set.\n - PGP_ASCII_ARMORED: `PGP ASCII Armored` public key.\n - PKIX_PEM:\
      \ `PKIX PEM` public key."
    enum:
    - "KEY_TYPE_UNSPECIFIED"
    - "PGP_ASCII_ARMORED"
    - "PKIX_PEM"
    default: "KEY_TYPE_UNSPECIFIED"
  CVSSAttackComplexity:
    type: "string"
    enum:
    - "ATTACK_COMPLEXITY_UNSPECIFIED"
    - "ATTACK_COMPLEXITY_LOW"
    - "ATTACK_COMPLEXITY_HIGH"
    - "ATTACK_COMPLEXITY_MEDIUM"
    default: "ATTACK_COMPLEXITY_UNSPECIFIED"
  CVSSAttackVector:
    type: "string"
    enum:
    - "ATTACK_VECTOR_UNSPECIFIED"
    - "ATTACK_VECTOR_NETWORK"
    - "ATTACK_VECTOR_ADJACENT"
    - "ATTACK_VECTOR_LOCAL"
    - "ATTACK_VECTOR_PHYSICAL"
    default: "ATTACK_VECTOR_UNSPECIFIED"
  CVSSAuthentication:
    type: "string"
    enum:
    - "AUTHENTICATION_UNSPECIFIED"
    - "AUTHENTICATION_MULTIPLE"
    - "AUTHENTICATION_SINGLE"
    - "AUTHENTICATION_NONE"
    default: "AUTHENTICATION_UNSPECIFIED"
  CVSSImpact:
    type: "string"
    enum:
    - "IMPACT_UNSPECIFIED"
    - "IMPACT_HIGH"
    - "IMPACT_LOW"
    - "IMPACT_NONE"
    - "IMPACT_PARTIAL"
    - "IMPACT_COMPLETE"
    default: "IMPACT_UNSPECIFIED"
  CVSSPrivilegesRequired:
    type: "string"
    enum:
    - "PRIVILEGES_REQUIRED_UNSPECIFIED"
    - "PRIVILEGES_REQUIRED_NONE"
    - "PRIVILEGES_REQUIRED_LOW"
    - "PRIVILEGES_REQUIRED_HIGH"
    default: "PRIVILEGES_REQUIRED_UNSPECIFIED"
  CVSSScope:
    type: "string"
    enum:
    - "SCOPE_UNSPECIFIED"
    - "SCOPE_UNCHANGED"
    - "SCOPE_CHANGED"
    default: "SCOPE_UNSPECIFIED"
  CVSSUserInteraction:
    type: "string"
    enum:
    - "USER_INTERACTION_UNSPECIFIED"
    - "USER_INTERACTION_NONE"
    - "USER_INTERACTION_REQUIRED"
    default: "USER_INTERACTION_UNSPECIFIED"
  DeploymentPlatform:
    type: "string"
    description: "Types of platforms.\n\n - PLATFORM_UNSPECIFIED: Unknown.\n - GKE:\
      \ Google Container Engine.\n - FLEX: Google App Engine: Flexible Environment.\n\
      \ - CUSTOM: Custom user-defined platform."
    enum:
    - "PLATFORM_UNSPECIFIED"
    - "GKE"
    - "FLEX"
    - "CUSTOM"
    default: "PLATFORM_UNSPECIFIED"
  DetailsVexAssessment:
    type: "object"
    properties:
      cve:
        type: "string"
        description: "Holds the MITRE standard Common Vulnerabilities and Exposures\
          \ (CVE)\ntracking number for the vulnerability."
      relatedUris:
        type: "array"
        description: "Holds a list of references associated with this vulnerability\
          \ item and\nassessment."
        items:
          $ref: "#/definitions/v1beta1RelatedUrl"
      noteName:
        type: "string"
        title: "The VulnerabilityAssessment note from which this VexAssessment was\n\
          generated.\nThis will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.\n\
          (-- api-linter: core::0122::name-suffix=disabled\n    aip.dev/not-precedent:\
          \ The suffix is kept for consistency. --)"
      state:
        description: "Provides the state of this Vulnerability assessment."
        $ref: "#/definitions/AssessmentState"
      impacts:
        type: "array"
        description: "Contains information about the impact of this vulnerability,\n\
          this will change with time."
        items:
          type: "string"
      remediations:
        type: "array"
        description: "Specifies details on how to handle (and presumably, fix) a vulnerability."
        items:
          $ref: "#/definitions/AssessmentRemediation"
      justification:
        description: "Justification provides the justification when the state of the\n\
          assessment if NOT_AFFECTED."
        $ref: "#/definitions/AssessmentJustification"
    description: "VexAssessment provides all publisher provided Vex information that\
      \ is\nrelated to this vulnerability."
    example:
      cve: "cve"
      relatedUris:
      - label: "label"
        url: "url"
      - label: "label"
        url: "url"
      noteName: "noteName"
      remediations:
      - remediationType: {}
        remediationUri:
          label: "label"
          url: "url"
        details: "details"
        remediationTime: "2000-01-23T04:56:07.000+00:00"
      - remediationType: {}
        remediationUri:
          label: "label"
          url: "url"
        details: "details"
        remediationTime: "2000-01-23T04:56:07.000+00:00"
      state: {}
      impacts:
      - "impacts"
      - "impacts"
      justification:
        justificationType: {}
        details: "details"
  DiscoveredAnalysisCompleted:
    type: "object"
    properties:
      analysisType:
        type: "array"
        items:
          type: "string"
    description: "Indicates which analysis completed successfully. Multiple types\
      \ of analysis\ncan be performed on a single resource."
    example:
      analysisType:
      - "analysisType"
      - "analysisType"
  DiscoveredAnalysisStatus:
    type: "string"
    description: "Analysis status for a resource. Currently for initial analysis only\
      \ (not\nupdated in continuous analysis).\n\n - ANALYSIS_STATUS_UNSPECIFIED:\
      \ Unknown.\n - PENDING: Resource is known but no action has been taken yet.\n\
      \ - SCANNING: Resource is being analyzed.\n - FINISHED_SUCCESS: Analysis has\
      \ finished successfully.\n - COMPLETE: Analysis has completed.\n - FINISHED_FAILED:\
      \ Analysis has finished unsuccessfully, the analysis itself is in a bad\nstate.\n\
      \ - FINISHED_UNSUPPORTED: The resource is known not to be supported"
    enum:
    - "ANALYSIS_STATUS_UNSPECIFIED"
    - "PENDING"
    - "SCANNING"
    - "FINISHED_SUCCESS"
    - "COMPLETE"
    - "FINISHED_FAILED"
    - "FINISHED_UNSUPPORTED"
    default: "ANALYSIS_STATUS_UNSPECIFIED"
  DiscoveredContinuousAnalysis:
    type: "string"
    description: "Whether the resource is continuously analyzed.\n\n - CONTINUOUS_ANALYSIS_UNSPECIFIED:\
      \ Unknown.\n - ACTIVE: The resource is continuously analyzed.\n - INACTIVE:\
      \ The resource is ignored for continuous analysis."
    enum:
    - "CONTINUOUS_ANALYSIS_UNSPECIFIED"
    - "ACTIVE"
    - "INACTIVE"
    default: "CONTINUOUS_ANALYSIS_UNSPECIFIED"
  ExternalRefCategory:
    type: "string"
    title: "The category of the external reference"
    description: "- CATEGORY_UNSPECIFIED: Unspecified\n - SECURITY: Security (e.g.\
      \ cpe22Type, cpe23Type)\n - PACKAGE_MANAGER: Package Manager (e.g. maven-central,\
      \ npm, nuget, bower, purl)\n - PERSISTENT_ID: Persistent-Id (e.g. swh)\n - OTHER:\
      \ Other"
    enum:
    - "CATEGORY_UNSPECIFIED"
    - "SECURITY"
    - "PACKAGE_MANAGER"
    - "PERSISTENT_ID"
    - "OTHER"
    default: "CATEGORY_UNSPECIFIED"
  FileNoteFileType:
    type: "string"
    title: "File Type is intrinsic to the file, independent of how the file is being\n\
      used"
    description: "- FILE_TYPE_UNSPECIFIED: Unspecified\n - SOURCE: The file is human\
      \ readable source code (.c, .html, etc.)\n - BINARY: The file is a compiled\
      \ object, target image or binary executable (.o, .a,\netc.)\n - ARCHIVE: The\
      \ file represents an archive (.tar, .jar, etc.)\n - APPLICATION: The file is\
      \ associated with a specific application type (MIME type of\napplication/*)\n\
      \ - AUDIO: The file is associated with an audio file (MIME type of audio/* ,\
      \ e.g.\n.mp3)\n - IMAGE: The file is associated with an picture image file (MIME\
      \ type of image/*,\ne.g., .jpg, .gif)\n - TEXT: The file is human readable text\
      \ file (MIME type of text/*)\n - VIDEO: The file is associated with a video\
      \ file type (MIME type of video/*)\n - DOCUMENTATION: The file serves as documentation\n\
      \ - SPDX: The file is an SPDX document\n - OTHER: The file doesn't fit into\
      \ the above categories (generated artifacts, data\nfiles, etc.)"
    enum:
    - "FILE_TYPE_UNSPECIFIED"
    - "SOURCE"
    - "BINARY"
    - "ARCHIVE"
    - "APPLICATION"
    - "AUDIO"
    - "IMAGE"
    - "TEXT"
    - "VIDEO"
    - "DOCUMENTATION"
    - "SPDX"
    - "OTHER"
    default: "FILE_TYPE_UNSPECIFIED"
  HashHashType:
    type: "string"
    description: "Specifies the hash algorithm.\n\n - HASH_TYPE_UNSPECIFIED: Unknown.\n\
      \ - SHA256: A SHA-256 hash."
    enum:
    - "HASH_TYPE_UNSPECIFIED"
    - "SHA256"
    default: "HASH_TYPE_UNSPECIFIED"
  InTotoArtifactRule:
    type: "object"
    properties:
      artifactRule:
        type: "array"
        items:
          type: "string"
    title: "Defines an object to declare an in-toto artifact rule"
    example:
      artifactRule:
      - "artifactRule"
      - "artifactRule"
  JustificationJustificationType:
    type: "string"
    description: "Provides the type of justification.\n\n - JUSTIFICATION_TYPE_UNSPECIFIED:\
      \ JUSTIFICATION_TYPE_UNSPECIFIED.\n - COMPONENT_NOT_PRESENT: The vulnerable\
      \ component is not present in the product.\n - VULNERABLE_CODE_NOT_PRESENT:\
      \ The vulnerable code is not present. Typically this case\noccurs when source\
      \ code is configured or built in a way that excludes\nthe vulnerable code.\n\
      \ - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH: The vulnerable code can not be executed.\n\
      Typically this case occurs when the product includes the vulnerable\ncode but\
      \ does not call or use the vulnerable code.\n - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY:\
      \ The vulnerable code cannot be controlled by an attacker to exploit\nthe vulnerability.\n\
      \ - INLINE_MITIGATIONS_ALREADY_EXIST: The product includes built-in protections\
      \ or features that prevent\nexploitation of the vulnerability. These built-in\
      \ protections cannot\nbe subverted by the attacker and cannot be configured\
      \ or disabled by\nthe user. These mitigations completely prevent exploitation\
      \ based on\nknown attack vectors."
    enum:
    - "JUSTIFICATION_TYPE_UNSPECIFIED"
    - "COMPONENT_NOT_PRESENT"
    - "VULNERABLE_CODE_NOT_PRESENT"
    - "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH"
    - "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY"
    - "INLINE_MITIGATIONS_ALREADY_EXIST"
    default: "JUSTIFICATION_TYPE_UNSPECIFIED"
  LayerDirective:
    type: "string"
    description: "Instructions from Dockerfile.\n\n - DIRECTIVE_UNSPECIFIED: Default\
      \ value for unsupported/missing directive.\n - MAINTAINER: https://docs.docker.com/engine/reference/builder/\n\
      \ - RUN: https://docs.docker.com/engine/reference/builder/\n - CMD: https://docs.docker.com/engine/reference/builder/\n\
      \ - LABEL: https://docs.docker.com/engine/reference/builder/\n - EXPOSE: https://docs.docker.com/engine/reference/builder/\n\
      \ - ENV: https://docs.docker.com/engine/reference/builder/\n - ADD: https://docs.docker.com/engine/reference/builder/\n\
      \ - COPY: https://docs.docker.com/engine/reference/builder/\n - ENTRYPOINT:\
      \ https://docs.docker.com/engine/reference/builder/\n - VOLUME: https://docs.docker.com/engine/reference/builder/\n\
      \ - USER: https://docs.docker.com/engine/reference/builder/\n - WORKDIR: https://docs.docker.com/engine/reference/builder/\n\
      \ - ARG: https://docs.docker.com/engine/reference/builder/\n - ONBUILD: https://docs.docker.com/engine/reference/builder/\n\
      \ - STOPSIGNAL: https://docs.docker.com/engine/reference/builder/\n - HEALTHCHECK:\
      \ https://docs.docker.com/engine/reference/builder/\n - SHELL: https://docs.docker.com/engine/reference/builder/"
    enum:
    - "DIRECTIVE_UNSPECIFIED"
    - "MAINTAINER"
    - "RUN"
    - "CMD"
    - "LABEL"
    - "EXPOSE"
    - "ENV"
    - "ADD"
    - "COPY"
    - "ENTRYPOINT"
    - "VOLUME"
    - "USER"
    - "WORKDIR"
    - "ARG"
    - "ONBUILD"
    - "STOPSIGNAL"
    - "HEALTHCHECK"
    - "SHELL"
    default: "DIRECTIVE_UNSPECIFIED"
  LinkArtifactHashes:
    type: "object"
    properties:
      sha256:
        type: "string"
    description: "Defines a hash object for use in Materials and Products."
    example:
      sha256: "sha256"
  LinkByProducts:
    type: "object"
    properties:
      customValues:
        type: "object"
        additionalProperties:
          type: "string"
    description: "Defines an object for the byproducts field in in-toto links. The\
      \ suggested\nfields are \"stderr\", \"stdout\", and \"return-value\"."
    example:
      customValues:
        key: "customValues"
  LinkEnvironment:
    type: "object"
    properties:
      customValues:
        type: "object"
        additionalProperties:
          type: "string"
    description: "Defines an object for the environment field in in-toto links. The\
      \ suggested\nfields are \"variables\", \"filesystem\", and \"workdir\"."
    example:
      customValues:
        key: "customValues"
  PackageInfoNoteExternalRef:
    type: "object"
    properties:
      category:
        title: "An External Reference allows a Package to reference an external source\
          \ of\nadditional information, metadata, enumerations, asset identifiers,\
          \ or\ndownloadable content believed to be relevant to the Package"
        $ref: "#/definitions/ExternalRefCategory"
      type:
        type: "string"
        title: "Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)"
      locator:
        type: "string"
        title: "The unique string with no spaces necessary to access the package-specific\n\
          information, metadata, or content within the target location"
      comment:
        type: "string"
        title: "Human-readable information about the purpose and target of the reference"
    title: "An External Reference allows a Package to reference an external source\
      \ of\nadditional information, metadata, enumerations, asset identifiers, or\n\
      downloadable content believed to be relevant to the Package"
    example:
      comment: "comment"
      category: {}
      type: "type"
      locator: "locator"
  RemediationRemediationType:
    type: "string"
    description: "The type of remediation that can be applied.\n\n - REMEDIATION_TYPE_UNSPECIFIED:\
      \ No remediation type specified.\n - MITIGATION: A MITIGATION is available.\n\
      \ - NO_FIX_PLANNED: No fix is planned.\n - NONE_AVAILABLE: Not available.\n\
      \ - VENDOR_FIX: A vendor fix is available.\n - WORKAROUND: A workaround is available."
    enum:
    - "REMEDIATION_TYPE_UNSPECIFIED"
    - "MITIGATION"
    - "NO_FIX_PLANNED"
    - "NONE_AVAILABLE"
    - "VENDOR_FIX"
    - "WORKAROUND"
    default: "REMEDIATION_TYPE_UNSPECIFIED"
  VersionVersionKind:
    type: "string"
    description: "Whether this is an ordinary package version or a sentinel MIN/MAX\
      \ version.\n\n - VERSION_KIND_UNSPECIFIED: Unknown.\n - NORMAL: A standard package\
      \ version.\n - MINIMUM: A special version representing negative infinity.\n\
      \ - MAXIMUM: A special version representing positive infinity."
    enum:
    - "VERSION_KIND_UNSPECIFIED"
    - "NORMAL"
    - "MINIMUM"
    - "MAXIMUM"
    default: "VERSION_KIND_UNSPECIFIED"
  VulnerabilityAssessmentNoteAssessment:
    type: "object"
    properties:
      cve:
        type: "string"
        description: "Holds the MITRE standard Common Vulnerabilities and Exposures\
          \ (CVE)\ntracking number for the vulnerability."
      shortDescription:
        type: "string"
        description: "A one sentence description of this Vex."
      longDescription:
        type: "string"
        description: "A detailed description of this Vex."
      relatedUris:
        type: "array"
        description: "Holds a list of references associated with this vulnerability\
          \ item and\nassessment. These uris have additional information about the\n\
          vulnerability and the assessment itself. E.g. Link to a document which\n\
          details how this assessment concluded the state of this vulnerability."
        items:
          $ref: "#/definitions/v1beta1RelatedUrl"
      state:
        description: "Provides the state of this Vulnerability assessment."
        $ref: "#/definitions/AssessmentState"
      impacts:
        type: "array"
        description: "Contains information about the impact of this vulnerability,\n\
          this will change with time."
        items:
          type: "string"
      justification:
        description: "Justification provides the justification when the state of the\n\
          assessment if NOT_AFFECTED."
        $ref: "#/definitions/AssessmentJustification"
      remediations:
        type: "array"
        description: "Specifies details on how to handle (and presumably, fix) a vulnerability."
        items:
          $ref: "#/definitions/AssessmentRemediation"
    description: "Assessment provides all information that is related to a single\n\
      vulnerability for this product."
    example:
      longDescription: "longDescription"
      cve: "cve"
      relatedUris:
      - label: "label"
        url: "url"
      - label: "label"
        url: "url"
      remediations:
      - remediationType: {}
        remediationUri:
          label: "label"
          url: "url"
        details: "details"
        remediationTime: "2000-01-23T04:56:07.000+00:00"
      - remediationType: {}
        remediationUri:
          label: "label"
          url: "url"
        details: "details"
        remediationTime: "2000-01-23T04:56:07.000+00:00"
      shortDescription: "shortDescription"
      state: {}
      impacts:
      - "impacts"
      - "impacts"
      justification:
        justificationType: {}
        details: "details"
  VulnerabilityAssessmentNoteProduct:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the product."
      id:
        type: "string"
        description: "Token that identifies a product so that it can be referred to\
          \ from other\nparts in the document. There is no predefined format as long\
          \ as it\nuniquely identifies a group in the context of the current document."
      genericUri:
        type: "string"
        description: "Contains a URI which is vendor-specific.\nExample: The artifact\
          \ repository URL of an image."
    title: "Product contains information about a product and how to uniquely identify\n\
      it.\n(-- api-linter: core::0123::resource-annotation=disabled\n    aip.dev/not-precedent:\
      \ Product is not a separate resource. --)"
    example:
      genericUri: "genericUri"
      name: "name"
      id: "id"
  VulnerabilityAssessmentNotePublisher:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the publisher.\nExamples: 'Google', 'Google Cloud Platform'."
      issuingAuthority:
        type: "string"
        description: "Provides information about the authority of the issuing party\
          \ to\nrelease the document, in particular, the party's constituency and\n\
          responsibilities or other obligations."
      context:
        type: "string"
        title: "The context or namespace.\nContains a URL which is under control of\
          \ the issuing party and can\nbe used as a globally unique identifier for\
          \ that issuing party.\nExample: https://csaf.io"
    title: "Publisher contains information about the publisher of\nthis Note.\n(--\
      \ api-linter: core::0123::resource-annotation=disabled\n    aip.dev/not-precedent:\
      \ Publisher is not a separate resource. --)"
    example:
      issuingAuthority: "issuingAuthority"
      name: "name"
      context: "context"
  VulnerabilityDetail:
    type: "object"
    properties:
      cpeUri:
        type: "string"
        description: "Required. The CPE URI in\n[cpe format](https://cpe.mitre.org/specification/)\
          \ in which the\nvulnerability manifests. Examples include distro or storage\
          \ location for\nvulnerable jar."
      package:
        type: "string"
        description: "Required. The name of the package where the vulnerability was\
          \ found."
      minAffectedVersion:
        description: "The min version of the package in which the vulnerability exists."
        $ref: "#/definitions/packageVersion"
      maxAffectedVersion:
        description: "The max version of the package in which the vulnerability exists."
        $ref: "#/definitions/packageVersion"
      severityName:
        type: "string"
        description: "The severity (eg: distro assigned severity) for this vulnerability."
      description:
        type: "string"
        description: "A vendor-specific description of this note."
      fixedLocation:
        description: "The fix for this specific package version."
        $ref: "#/definitions/vulnerabilityVulnerabilityLocation"
      packageType:
        type: "string"
        description: "The type of package; whether native or non native(ruby gems,\
          \ node.js\npackages etc)."
      isObsolete:
        type: "boolean"
        description: "Whether this detail is obsolete. Occurrences are expected not\
          \ to point to\nobsolete details."
      sourceUpdateTime:
        type: "string"
        format: "date-time"
        description: "The time this information was last changed at the source. This\
          \ is an\nupstream timestamp from the underlying information source - e.g.\
          \ Ubuntu\nsecurity tracker."
      source:
        type: "string"
        description: "The source from which the information in this Detail was obtained."
      vendor:
        type: "string"
        description: "The name of the vendor of the product."
    title: "Identifies all appearances of this vulnerability in the package for a\n\
      specific distro/location. For example: glibc in\ncpe:/o:debian:debian_linux:8\
      \ for versions 2.1 - 2.2"
    example:
      package: "package"
      minAffectedVersion:
        inclusive: true
        kind: {}
        name: "name"
        epoch: 6
        revision: "revision"
      maxAffectedVersion:
        inclusive: true
        kind: {}
        name: "name"
        epoch: 6
        revision: "revision"
      vendor: "vendor"
      description: "description"
      sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
      isObsolete: true
      source: "source"
      cpeUri: "cpeUri"
      fixedLocation:
        package: "package"
        cpeUri: "cpeUri"
        version:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
      packageType: "packageType"
      severityName: "severityName"
  VulnerabilityOccurrencesSummaryFixableTotalByDigest:
    type: "object"
    properties:
      resource:
        description: "The affected resource."
        $ref: "#/definitions/v1beta1Resource"
      severity:
        description: "The severity for this count. SEVERITY_UNSPECIFIED indicates\
          \ total across\nall severities."
        $ref: "#/definitions/vulnerabilitySeverity"
      fixableCount:
        type: "string"
        format: "int64"
        description: "The number of fixable vulnerabilities associated with this resource."
      totalCount:
        type: "string"
        format: "int64"
        description: "The total number of vulnerabilities associated with this resource."
    description: "Per resource and severity counts of fixable and total vulnerabilities."
    example:
      severity: {}
      fixableCount: "fixableCount"
      resource:
        name: "name"
        uri: "uri"
        contentHash:
          type: {}
          value: "value"
      totalCount: "totalCount"
  VulnerabilityWindowsDetail:
    type: "object"
    properties:
      cpeUri:
        type: "string"
        description: "Required. The CPE URI in\n[cpe format](https://cpe.mitre.org/specification/)\
          \ in which the\nvulnerability manifests. Examples include distro or storage\
          \ location for\nvulnerable jar."
      name:
        type: "string"
        description: "Required. The name of the vulnerability."
      description:
        type: "string"
        description: "The description of the vulnerability."
      fixingKbs:
        type: "array"
        description: "Required. The names of the KBs which have hotfixes to mitigate\
          \ this\nvulnerability. Note that there may be multiple hotfixes (and thus\n\
          multiple KBs) that mitigate a given vulnerability. Currently any listed\n\
          kb's presence is considered a fix."
        items:
          $ref: "#/definitions/WindowsDetailKnowledgeBase"
    example:
      name: "name"
      description: "description"
      fixingKbs:
      - name: "name"
        url: "url"
      - name: "name"
        url: "url"
      cpeUri: "cpeUri"
  WindowsDetailKnowledgeBase:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The KB name (generally of the form KB[0-9]+ i.e. KB123456)."
      url:
        type: "string"
        title: "A link to the KB in the Windows update catalog -\nhttps://www.catalog.update.microsoft.com/"
    example:
      name: "name"
      url: "url"
  attestationAttestation:
    type: "object"
    properties:
      pgpSignedAttestation:
        description: "A PGP signed attestation."
        $ref: "#/definitions/attestationPgpSignedAttestation"
      genericSignedAttestation:
        description: "An attestation that supports multiple `Signature`s\nover the\
          \ same attestation payload. The signatures\n(defined in common.proto) support\
          \ a superset of\npublic key types and IDs compared to PgpSignedAttestation."
        $ref: "#/definitions/attestationGenericSignedAttestation"
    description: "Occurrence that represents a single \"attestation\". The authenticity\
      \ of an\nattestation can be verified using the attached signature. If the verifier\n\
      trusts the public key of the signer, then verifying the signature is\nsufficient\
      \ to establish trust. In this circumstance, the authority to which\nthis attestation\
      \ is attached is primarily useful for look-up (how to find\nthis attestation\
      \ if you already know the authority and artifact to be\nverified) and intent\
      \ (which authority was this attestation intended to sign\nfor)."
    example:
      genericSignedAttestation:
        serializedPayload: "serializedPayload"
        contentType: {}
        signatures:
        - signature: "signature"
          publicKeyId: "publicKeyId"
        - signature: "signature"
          publicKeyId: "publicKeyId"
      pgpSignedAttestation:
        signature: "signature"
        pgpKeyId: "pgpKeyId"
        contentType: {}
  attestationAuthority:
    type: "object"
    properties:
      hint:
        description: "Hint hints at the purpose of the attestation authority."
        $ref: "#/definitions/AuthorityHint"
    description: "Note kind that represents a logical attestation \"role\" or \"authority\"\
      . For\nexample, an organization might have one `Authority` for \"QA\" and one\
      \ for\n\"build\". This note is intended to act strictly as a grouping mechanism\
      \ for\nthe attached occurrences (Attestations). This grouping mechanism also\n\
      provides a security boundary, since IAM ACLs gate the ability for a principle\n\
      to attach an occurrence to a given note. It also provides a single point of\n\
      lookup to find all attached attestation occurrences, even if they don't all\n\
      live in the same project."
    example:
      hint:
        humanReadableName: "humanReadableName"
  attestationGenericSignedAttestation:
    type: "object"
    properties:
      contentType:
        description: "Type (for example schema) of the attestation payload that was\
          \ signed.\nThe verifier must ensure that the provided type is one that the\
          \ verifier\nsupports, and that the attestation payload is a valid instantiation\
          \ of that\ntype (for example by validating a JSON schema)."
        $ref: "#/definitions/attestationGenericSignedAttestationContentType"
      serializedPayload:
        type: "string"
        format: "byte"
        description: "The serialized payload that is verified by one or more `signatures`.\n\
          The encoding and semantic meaning of this payload must match what is set\
          \ in\n`content_type`."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      signatures:
        type: "array"
        description: "One or more signatures over `serialized_payload`.  Verifier\
          \ implementations\nshould consider this attestation message verified if\
          \ at least one\n`signature` verifies `serialized_payload`.  See `Signature`\
          \ in common.proto\nfor more details on signature structure and verification."
        items:
          $ref: "#/definitions/grafeasv1beta1Signature"
    description: "An attestation wrapper that uses the Grafeas `Signature` message.\n\
      This attestation must define the `serialized_payload` that the `signatures`\
      \ verify\nand any metadata necessary to interpret that plaintext.  The signatures\n\
      should always be over the `serialized_payload` bytestring."
    example:
      serializedPayload: "serializedPayload"
      contentType: {}
      signatures:
      - signature: "signature"
        publicKeyId: "publicKeyId"
      - signature: "signature"
        publicKeyId: "publicKeyId"
  attestationGenericSignedAttestationContentType:
    type: "string"
    description: "Type of the attestation plaintext that was signed.\n\n - CONTENT_TYPE_UNSPECIFIED:\
      \ `ContentType` is not set.\n - SIMPLE_SIGNING_JSON: Atomic format attestation\
      \ signature. See\nhttps://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md\n\
      The payload extracted in `plaintext` is a JSON blob conforming to the\nlinked\
      \ schema."
    enum:
    - "CONTENT_TYPE_UNSPECIFIED"
    - "SIMPLE_SIGNING_JSON"
    default: "CONTENT_TYPE_UNSPECIFIED"
  attestationPgpSignedAttestation:
    type: "object"
    properties:
      signature:
        type: "string"
        description: "Required. The raw content of the signature, as output by GNU\
          \ Privacy Guard\n(GPG) or equivalent. Since this message only supports attached\
          \ signatures,\nthe payload that was signed must be attached. While the signature\
          \ format\nsupported is dependent on the verification implementation, currently\
          \ only\nASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather\
          \ than\n`--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor\n\
          --output=signature.gpg payload.json` will create the signature content\n\
          expected in this field in `signature.gpg` for the `payload.json`\nattestation\
          \ payload."
      contentType:
        description: "Type (for example schema) of the attestation payload that was\
          \ signed.\nThe verifier must ensure that the provided type is one that the\
          \ verifier\nsupports, and that the attestation payload is a valid instantiation\
          \ of that\ntype (for example by validating a JSON schema)."
        $ref: "#/definitions/attestationPgpSignedAttestationContentType"
      pgpKeyId:
        type: "string"
        description: "The cryptographic fingerprint of the key used to generate the\
          \ signature,\nas output by, e.g. `gpg --list-keys`. This should be the version\
          \ 4, full\n160-bit fingerprint, expressed as a 40 character hexadecimal\
          \ string. See\nhttps://tools.ietf.org/html/rfc4880#section-12.2 for details.\n\
          Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other\n\
          abbreviated key IDs, but only the full fingerprint is guaranteed to work.\n\
          In gpg, the full fingerprint can be retrieved from the `fpr` field\nreturned\
          \ when calling --list-keys with --with-colons.  For example:\n```\ngpg --with-colons\
          \ --with-fingerprint --force-v4-certs \\\n    --list-keys attester@example.com\n\
          tru::1:1513631572:0:3:1:5\npub:...<SNIP>...\nfpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:\n\
          ```\nAbove, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`."
    description: "An attestation wrapper with a PGP-compatible signature. This message\
      \ only\nsupports `ATTACHED` signatures, where the payload that is signed is\
      \ included\nalongside the signature itself in the same file."
    example:
      signature: "signature"
      pgpKeyId: "pgpKeyId"
      contentType: {}
  attestationPgpSignedAttestationContentType:
    type: "string"
    description: "Type (for example schema) of the attestation payload that was signed.\n\
      \n - CONTENT_TYPE_UNSPECIFIED: `ContentType` is not set.\n - SIMPLE_SIGNING_JSON:\
      \ Atomic format attestation signature. See\nhttps://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md\n\
      The payload extracted from `signature` is a JSON blob conforming to the\nlinked\
      \ schema."
    enum:
    - "CONTENT_TYPE_UNSPECIFIED"
    - "SIMPLE_SIGNING_JSON"
    default: "CONTENT_TYPE_UNSPECIFIED"
  buildBuild:
    type: "object"
    properties:
      builderVersion:
        type: "string"
        description: "Required. Immutable. Version of the builder which produced this\
          \ build."
      signature:
        description: "Signature of the build in occurrences pointing to this build\
          \ note\ncontaining build details."
        $ref: "#/definitions/buildBuildSignature"
    description: "Note holding the version of the provider's builder and the signature\
      \ of the\nprovenance message in the build details occurrence."
    example:
      signature:
        signature: "signature"
        keyId: "keyId"
        publicKey: "publicKey"
        keyType: {}
      builderVersion: "builderVersion"
  buildBuildSignature:
    type: "object"
    properties:
      publicKey:
        type: "string"
        description: "Public key of the builder which can be used to verify that the\
          \ related\nfindings are valid and unchanged. If `key_type` is empty, this\
          \ defaults\nto PEM encoded public keys.\n\nThis field may be empty if `key_id`\
          \ references an external key.\n\nFor Cloud Build based signatures, this\
          \ is a PEM encoded public\nkey. To verify the Cloud Build signature, place\
          \ the contents of\nthis field into a file (public.pem). The signature field\
          \ is base64-decoded\ninto its binary representation in signature.bin, and\
          \ the provenance bytes\nfrom `BuildDetails` are base64-decoded into a binary\
          \ representation in\nsigned.bin. OpenSSL can then verify the signature:\n\
          `openssl sha256 -verify public.pem -signature signature.bin signed.bin`"
      signature:
        type: "string"
        format: "byte"
        description: "Required. Signature of the related `BuildProvenance`. In JSON,\
          \ this is\nbase-64 encoded."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      keyId:
        type: "string"
        description: "An ID for the key used to sign. This could be either an ID for\
          \ the key\nstored in `public_key` (such as the ID or fingerprint for a PGP\
          \ key, or the\nCN for a cert), or a reference to an external key (such as\
          \ a reference to a\nkey in Cloud Key Management Service)."
      keyType:
        description: "The type of the key, either stored in `public_key` or referenced\
          \ in\n`key_id`."
        $ref: "#/definitions/BuildSignatureKeyType"
    description: "Message encapsulating the signature of the verified build."
    example:
      signature: "signature"
      keyId: "keyId"
      publicKey: "publicKey"
      keyType: {}
  deploymentDeployable:
    type: "object"
    properties:
      resourceUri:
        type: "array"
        description: "Required. Resource URI for the artifact being deployed."
        items:
          type: "string"
    description: "An artifact that can be deployed in some runtime."
    example:
      resourceUri:
      - "resourceUri"
      - "resourceUri"
  deploymentDeployment:
    type: "object"
    properties:
      userEmail:
        type: "string"
        description: "Identity of the user that triggered this deployment."
      deployTime:
        type: "string"
        format: "date-time"
        description: "Required. Beginning of the lifetime of this deployment."
      undeployTime:
        type: "string"
        format: "date-time"
        description: "End of the lifetime of this deployment."
      config:
        type: "string"
        description: "Configuration used to create this deployment."
      address:
        type: "string"
        description: "Address of the runtime element hosting this deployment."
      resourceUri:
        type: "array"
        description: "Output only. Resource URI for the artifact being deployed taken\
          \ from\nthe deployable field with the same name."
        readOnly: true
        items:
          type: "string"
      platform:
        description: "Platform hosting this deployment."
        $ref: "#/definitions/DeploymentPlatform"
    description: "The period during which some deployable was active in a runtime."
    example:
      address: "address"
      undeployTime: "2000-01-23T04:56:07.000+00:00"
      userEmail: "userEmail"
      deployTime: "2000-01-23T04:56:07.000+00:00"
      resourceUri:
      - "resourceUri"
      - "resourceUri"
      config: "config"
      platform: {}
  discoveryDiscovered:
    type: "object"
    properties:
      continuousAnalysis:
        description: "Whether the resource is continuously analyzed."
        $ref: "#/definitions/DiscoveredContinuousAnalysis"
      lastAnalysisTime:
        type: "string"
        format: "date-time"
        description: "The last time continuous analysis was done for this resource.\n\
          Deprecated, do not use."
      analysisStatus:
        description: "The status of discovery for the resource."
        $ref: "#/definitions/DiscoveredAnalysisStatus"
      analysisCompleted:
        $ref: "#/definitions/DiscoveredAnalysisCompleted"
      analysisError:
        type: "array"
        description: "Indicates any errors encountered during analysis of a resource.\
          \ There\ncould be 0 or more of these errors."
        items:
          $ref: "#/definitions/rpcStatus"
      analysisStatusError:
        description: "When an error is encountered this will contain a LocalizedMessage\
          \ under\ndetails to show to the user. The LocalizedMessage is output only\
          \ and\npopulated by the API."
        $ref: "#/definitions/rpcStatus"
    description: "Provides information about the analysis status of a discovered resource."
    example:
      analysisCompleted:
        analysisType:
        - "analysisType"
        - "analysisType"
      analysisError:
      - code: 1
        details:
        - '@type': "@type"
        - '@type': "@type"
        message: "message"
      - code: 1
        details:
        - '@type': "@type"
        - '@type': "@type"
        message: "message"
      analysisStatusError:
        code: 1
        details:
        - '@type': "@type"
        - '@type': "@type"
        message: "message"
      continuousAnalysis: {}
      lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
      analysisStatus: {}
  discoveryDiscovery:
    type: "object"
    properties:
      analysisKind:
        description: "Required. Immutable. The kind of analysis that is handled by\
          \ this\ndiscovery."
        $ref: "#/definitions/v1beta1NoteKind"
    description: "A note that indicates a type of analysis a provider would perform.\
      \ This note\nexists in a provider's project. A `Discovery` occurrence is created\
      \ in a\nconsumer's project at the start of analysis."
    example: {}
  grafeasv1beta1Signature:
    type: "object"
    properties:
      signature:
        type: "string"
        format: "byte"
        description: "The content of the signature, an opaque bytestring.\nThe payload\
          \ that this signature verifies MUST be unambiguously provided\nwith the\
          \ Signature during verification. A wrapper message might provide\nthe payload\
          \ explicitly. Alternatively, a message might have a canonical\nserialization\
          \ that can always be unambiguously computed to derive the\npayload."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      publicKeyId:
        type: "string"
        description: "The identifier for the public key that verifies this signature.\n\
          \  * The `public_key_id` is required.\n  * The `public_key_id` SHOULD be\
          \ an RFC3986 conformant URI.\n  * When possible, the `public_key_id` SHOULD\
          \ be an immutable reference,\n    such as a cryptographic digest.\n\nExamples\
          \ of valid `public_key_id`s:\n\nOpenPGP V4 public key fingerprint:\n  *\
          \ \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\"\nSee https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr\
          \ for more\ndetails on this scheme.\n\nRFC6920 digest-named SubjectPublicKeyInfo\
          \ (digest of the DER\nserialization):\n  * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\"\
          \n  * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\""
    description: "Verifiers (e.g. Kritis implementations) MUST verify signatures\n\
      with respect to the trust anchors defined in policy (e.g. a Kritis policy).\n\
      Typically this means that the verifier has been configured with a map from\n\
      `public_key_id` to public key material (and any required parameters, e.g.\n\
      signing algorithm).\n\nIn particular, verification implementations MUST NOT\
      \ treat the signature\n`public_key_id` as anything more than a key lookup hint.\
      \ The `public_key_id`\nDOES NOT validate or authenticate a public key; it only\
      \ provides a mechanism\nfor quickly selecting a public key ALREADY CONFIGURED\
      \ on the verifier through\na trusted channel. Verification implementations MUST\
      \ reject signatures in any\nof the following circumstances:\n  * The `public_key_id`\
      \ is not recognized by the verifier.\n  * The public key that `public_key_id`\
      \ refers to does not verify the\n    signature with respect to the payload.\n\
      \nThe `signature` contents SHOULD NOT be \"attached\" (where the payload is\n\
      included with the serialized `signature` bytes). Verifiers MUST ignore any\n\
      \"attached\" payload and only verify signatures with respect to explicitly\n\
      provided payload (e.g. a `payload` field on the proto message that holds\nthis\
      \ Signature, or the canonical serialization of the proto message that\nholds\
      \ this signature)."
    example:
      signature: "signature"
      publicKeyId: "publicKeyId"
  imageBasis:
    type: "object"
    properties:
      resourceUrl:
        type: "string"
        description: "Required. Immutable. The resource_url for the resource representing\
          \ the\nbasis of associated occurrence images."
      fingerprint:
        description: "Required. Immutable. The fingerprint of the base image."
        $ref: "#/definitions/imageFingerprint"
    description: "Basis describes the base image portion (Note) of the DockerImage\n\
      relationship. Linked occurrences are derived from this or an\nequivalent image\
      \ via:\n  FROM <Basis.resource_url>\nOr an equivalent reference, e.g. a tag\
      \ of the resource_url."
    example:
      resourceUrl: "resourceUrl"
      fingerprint:
        v1Name: "v1Name"
        v2Blob:
        - "v2Blob"
        - "v2Blob"
        v2Name: "v2Name"
  imageDerived:
    type: "object"
    properties:
      fingerprint:
        description: "Required. The fingerprint of the derived image."
        $ref: "#/definitions/imageFingerprint"
      distance:
        type: "integer"
        format: "int32"
        description: "Output only. The number of layers by which this image differs\
          \ from the\nassociated image basis."
        readOnly: true
      layerInfo:
        type: "array"
        description: "This contains layer-specific metadata, if populated it has length\n\
          \"distance\" and is ordered with [distance] being the layer immediately\n\
          following the base image and [1] being the final layer."
        items:
          $ref: "#/definitions/imageLayer"
      baseResourceUrl:
        type: "string"
        description: "Output only. This contains the base image URL for the derived\
          \ image\noccurrence."
        readOnly: true
    description: "Derived describes the derived image portion (Occurrence) of the\
      \ DockerImage\nrelationship. This image would be produced from a Dockerfile\
      \ with FROM\n<DockerImage.Basis in attached Note>."
    example:
      distance: 6
      fingerprint:
        v1Name: "v1Name"
        v2Blob:
        - "v2Blob"
        - "v2Blob"
        v2Name: "v2Name"
      baseResourceUrl: "baseResourceUrl"
      layerInfo:
      - arguments: "arguments"
        directive: {}
      - arguments: "arguments"
        directive: {}
  imageFingerprint:
    type: "object"
    properties:
      v1Name:
        type: "string"
        description: "Required. The layer ID of the final layer in the Docker image's\
          \ v1\nrepresentation."
      v2Blob:
        type: "array"
        description: "Required. The ordered list of v2 blobs that represent a given\
          \ image."
        items:
          type: "string"
      v2Name:
        type: "string"
        description: "Output only. The name of the image's v2 blobs computed via:\n\
          \  [bottom] := v2_blob[bottom]\n  [N] := sha256(v2_blob[N] + \" \" + v2_name[N+1])\n\
          Only the name of the final blob is kept."
        readOnly: true
    description: "A set of properties that uniquely identify a given Docker image."
    example:
      v1Name: "v1Name"
      v2Blob:
      - "v2Blob"
      - "v2Blob"
      v2Name: "v2Name"
  imageLayer:
    type: "object"
    properties:
      directive:
        description: "Required. The recovered Dockerfile directive used to construct\
          \ this layer."
        $ref: "#/definitions/LayerDirective"
      arguments:
        type: "string"
        description: "The recovered arguments to the Dockerfile directive."
    description: "Layer holds metadata specific to a layer of a Docker image."
    example:
      arguments: "arguments"
      directive: {}
  intotoInToto:
    type: "object"
    properties:
      stepName:
        type: "string"
        description: "This field identifies the name of the step in the supply chain."
      signingKeys:
        type: "array"
        description: "This field contains the public keys that can be used to verify\
          \ the\nsignatures on the step metadata."
        items:
          $ref: "#/definitions/intotoSigningKey"
      expectedMaterials:
        type: "array"
        description: "The following fields contain in-toto artifact rules identifying\
          \ the\nartifacts that enter this supply chain step, and exit the supply\
          \ chain\nstep, i.e. materials and products of the step."
        items:
          $ref: "#/definitions/InTotoArtifactRule"
      expectedProducts:
        type: "array"
        items:
          $ref: "#/definitions/InTotoArtifactRule"
      expectedCommand:
        type: "array"
        description: "This field contains the expected command used to perform the\
          \ step."
        items:
          type: "string"
      threshold:
        type: "string"
        format: "int64"
        description: "This field contains a value that indicates the minimum number\
          \ of keys that\nneed to be used to sign the step's in-toto link."
    description: "This contains the fields corresponding to the definition of a software\
      \ supply\nchain step in an in-toto layout. This information goes into a Grafeas\
      \ note."
    example:
      expectedMaterials:
      - artifactRule:
        - "artifactRule"
        - "artifactRule"
      - artifactRule:
        - "artifactRule"
        - "artifactRule"
      signingKeys:
      - publicKeyValue: "publicKeyValue"
        keyId: "keyId"
        keyType: "keyType"
        keyScheme: "keyScheme"
      - publicKeyValue: "publicKeyValue"
        keyId: "keyId"
        keyType: "keyType"
        keyScheme: "keyScheme"
      expectedProducts:
      - artifactRule:
        - "artifactRule"
        - "artifactRule"
      - artifactRule:
        - "artifactRule"
        - "artifactRule"
      stepName: "stepName"
      threshold: "threshold"
      expectedCommand:
      - "expectedCommand"
      - "expectedCommand"
  intotoLink:
    type: "object"
    properties:
      command:
        type: "array"
        title: "This field contains the full command executed for the step. This can\
          \ also\nbe empty if links are generated for operations that aren't directly\
          \ mapped\nto a specific command. Each term in the command is an independent\
          \ string\nin the list. An example of a command in the in-toto metadata field\
          \ is:\n\"command\": [\"git\", \"clone\", \"https://github.com/in-toto/demo-project.git\"\
          ]"
        items:
          type: "string"
      materials:
        type: "array"
        title: "Materials are the supply chain artifacts that go into the step and\
          \ are used\nfor the operation performed. The key of the map is the path\
          \ of the artifact\nand the structure contains the recorded hash information.\
          \ An example is:\n\"materials\": [\n  {\n    \"resource_uri\": \"foo/bar\"\
          ,\n    \"hashes\": {\n      \"sha256\": \"ebebf...\",\n      <OTHER HASH\
          \ ALGORITHMS>: <HASH VALUE>\n    }\n  }\n]"
        items:
          $ref: "#/definitions/intotoLinkArtifact"
      products:
        type: "array"
        description: "Products are the supply chain artifacts generated as a result\
          \ of the step.\nThe structure is identical to that of materials."
        items:
          $ref: "#/definitions/intotoLinkArtifact"
      byproducts:
        description: "ByProducts are data generated as part of a software supply chain\
          \ step, but\nare not the actual result of the step."
        $ref: "#/definitions/LinkByProducts"
      environment:
        title: "This is a field that can be used to capture information about the\n\
          environment. It is suggested for this field to contain information that\n\
          details environment variables, filesystem information, and the present\n\
          working directory. The recommended structure of this field is:\n\"environment\"\
          : {\n  \"custom_values\": {\n    \"variables\": \"<ENV>\",\n    \"filesystem\"\
          : \"<FS>\",\n    \"workdir\": \"<CWD>\",\n    \"<ANY OTHER RELEVANT FIELDS>\"\
          : \"...\"\n  }\n}"
        $ref: "#/definitions/LinkEnvironment"
    description: "This corresponds to an in-toto link."
    example:
      environment:
        customValues:
          key: "customValues"
      materials:
      - hashes:
          sha256: "sha256"
        resourceUri: "resourceUri"
      - hashes:
          sha256: "sha256"
        resourceUri: "resourceUri"
      byproducts:
        customValues:
          key: "customValues"
      command:
      - "command"
      - "command"
      products:
      - hashes:
          sha256: "sha256"
        resourceUri: "resourceUri"
      - hashes:
          sha256: "sha256"
        resourceUri: "resourceUri"
  intotoLinkArtifact:
    type: "object"
    properties:
      resourceUri:
        type: "string"
      hashes:
        $ref: "#/definitions/LinkArtifactHashes"
    example:
      hashes:
        sha256: "sha256"
      resourceUri: "resourceUri"
  intotoSigningKey:
    type: "object"
    properties:
      keyId:
        type: "string"
        description: "key_id is an identifier for the signing key."
      keyType:
        type: "string"
        description: "This field identifies the specific signing method. Eg: \"rsa\"\
          , \"ed25519\",\nand \"ecdsa\"."
      publicKeyValue:
        type: "string"
        description: "This field contains the actual public key."
      keyScheme:
        type: "string"
        description: "This field contains the corresponding signature scheme.\nEg:\
          \ \"rsassa-pss-sha256\"."
    description: "This defines the format used to record keys used in the software\
      \ supply\nchain. An in-toto link is attested using one or more keys defined\
      \ in the\nin-toto layout. An example of this is:\n{\n  \"key_id\": \"776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...\"\
      ,\n  \"key_type\": \"rsa\",\n  \"public_key_value\": \"-----BEGIN PUBLIC KEY-----\\\
      nMIIBojANBgkqhkiG9w0B...\",\n  \"key_scheme\": \"rsassa-pss-sha256\"\n}\nThe\
      \ format for in-toto's key definition can be found in section 4.2 of the\nin-toto\
      \ specification."
    example:
      publicKeyValue: "publicKeyValue"
      keyId: "keyId"
      keyType: "keyType"
      keyScheme: "keyScheme"
  packageArchitecture:
    type: "string"
    description: "Instruction set architectures supported by various package managers.\n\
      \n - ARCHITECTURE_UNSPECIFIED: Unknown architecture.\n - X86: X86 architecture.\n\
      \ - X64: X64 architecture."
    enum:
    - "ARCHITECTURE_UNSPECIFIED"
    - "X86"
    - "X64"
    default: "ARCHITECTURE_UNSPECIFIED"
  packageDistribution:
    type: "object"
    required:
    - "cpeUri"
    properties:
      cpeUri:
        type: "string"
        description: "The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)\n\
          denoting the package manager version distributing a package."
      architecture:
        description: "The CPU architecture for which packages in this distribution\
          \ channel were\nbuilt."
        $ref: "#/definitions/packageArchitecture"
      latestVersion:
        description: "The latest available version of this package in this distribution\
          \ channel."
        $ref: "#/definitions/packageVersion"
      maintainer:
        type: "string"
        description: "A freeform string denoting the maintainer of this package."
      url:
        type: "string"
        description: "The distribution channel-specific homepage for this package."
      description:
        type: "string"
        description: "The distribution channel-specific description of this package."
    description: "This represents a particular channel of distribution for a given\
      \ package.\nE.g., Debian's jessie-backports dpkg mirror."
    example:
      latestVersion:
        inclusive: true
        kind: {}
        name: "name"
        epoch: 6
        revision: "revision"
      description: "description"
      cpeUri: "cpeUri"
      maintainer: "maintainer"
      url: "url"
      architecture: {}
  packageInstallation:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "The name of the installed package."
        readOnly: true
      location:
        type: "array"
        description: "All of the places within the filesystem versions of this package\n\
          have been found."
        items:
          $ref: "#/definitions/v1beta1packageLocation"
      packageType:
        type: "string"
        description: "The type of package; whether native or non native (e.g., ruby\
          \ gems,\nnode.js packages, etc.)."
        readOnly: true
      cpeUri:
        type: "string"
        description: "The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)\n\
          denoting the package manager version distributing a package.\nThe cpe_uri\
          \ will be blank for language packages."
        readOnly: true
      architecture:
        description: "The CPU architecture for which packages in this distribution\
          \ channel were\nbuilt. Architecture will be blank for language packages."
        $ref: "#/definitions/packageArchitecture"
      license:
        description: "Licenses that have been declared by the authors of the package."
        $ref: "#/definitions/v1beta1License"
      version:
        description: "The version of the package."
        $ref: "#/definitions/packageVersion"
    description: "This represents how a particular software package may be installed\
      \ on a\nsystem."
    example:
      license:
        expression: "expression"
        comments: "comments"
      name: "name"
      location:
      - path: "path"
        cpeUri: "cpeUri"
        version:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
      - path: "path"
        cpeUri: "cpeUri"
        version:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
      packageType: "packageType"
      cpeUri: "cpeUri"
      version:
        inclusive: true
        kind: {}
        name: "name"
        epoch: 6
        revision: "revision"
      architecture: {}
  packagePackage:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "The name of the package."
      distribution:
        type: "array"
        description: "The various channels by which a package is distributed."
        items:
          $ref: "#/definitions/packageDistribution"
      packageType:
        type: "string"
        description: "The type of package; whether native or non native (e.g., ruby\
          \ gems,\nnode.js packages, etc.)."
      cpeUri:
        type: "string"
        description: "The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)\n\
          denoting the package manager version distributing a package.\nThe cpe_uri\
          \ will be blank for language packages."
      architecture:
        description: "The CPU architecture for which packages in this distribution\
          \ channel were\nbuilt. Architecture will be blank for language packages."
        $ref: "#/definitions/packageArchitecture"
      version:
        description: "The version of the package."
        $ref: "#/definitions/packageVersion"
      maintainer:
        type: "string"
        description: "A freeform text denoting the maintainer of this package."
      url:
        type: "string"
        description: "The homepage for this package."
      description:
        type: "string"
        description: "The description of this package."
      license:
        description: "Licenses that have been declared by the authors of the package."
        $ref: "#/definitions/v1beta1License"
      digest:
        type: "array"
        description: "Hash value, typically a file digest, that allows unique\nidentification\
          \ a specific package."
        items:
          $ref: "#/definitions/v1beta1Digest"
    description: "Package represents a particular package version."
    example:
      license:
        expression: "expression"
        comments: "comments"
      name: "name"
      digest:
      - digestBytes: "digestBytes"
        algo: "algo"
      - digestBytes: "digestBytes"
        algo: "algo"
      description: "description"
      distribution:
      - latestVersion:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        description: "description"
        cpeUri: "cpeUri"
        maintainer: "maintainer"
        url: "url"
        architecture: {}
      - latestVersion:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        description: "description"
        cpeUri: "cpeUri"
        maintainer: "maintainer"
        url: "url"
        architecture: {}
      packageType: "packageType"
      cpeUri: "cpeUri"
      version:
        inclusive: true
        kind: {}
        name: "name"
        epoch: 6
        revision: "revision"
      maintainer: "maintainer"
      url: "url"
  packageVersion:
    type: "object"
    properties:
      epoch:
        type: "integer"
        format: "int32"
        description: "Used to correct mistakes in the version numbering scheme."
      name:
        type: "string"
        description: "Required only when version kind is NORMAL. The main part of\
          \ the version\nname."
      revision:
        type: "string"
        description: "The iteration of the package build from the above version."
      inclusive:
        type: "boolean"
        description: "Whether this version is specifying part of an inclusive range.\
          \ Grafeas\ndoes not have the capability to specify version ranges; instead\
          \ we have\nfields that specify start version and end versions. At times\
          \ this is\ninsufficient - we also need to specify whether the version is\
          \ included in\nthe range or is excluded from the range. This boolean is\
          \ expected to be set\nto true when the version is included in a range."
      kind:
        description: "Required. Distinguishes between sentinel MIN/MAX versions and\
          \ normal\nversions."
        $ref: "#/definitions/VersionVersionKind"
    description: "Version contains structured information about the version of a package."
    example:
      inclusive: true
      kind: {}
      name: "name"
      epoch: 6
      revision: "revision"
  protobufAny:
    type: "object"
    properties:
      '@type':
        type: "string"
        description: "A URL/resource name that uniquely identifies the type of the\
          \ serialized\nprotocol buffer message. This string must contain at least\n\
          one \"/\" character. The last segment of the URL's path must represent\n\
          the fully qualified name of the type (as in\n`path/google.protobuf.Duration`).\
          \ The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\
          \nIn practice, teams usually precompile into the binary all types that they\n\
          expect it to use in the context of Any. However, for URLs which use the\n\
          scheme `http`, `https`, or no scheme, one can optionally set up a type\n\
          server that maps type URLs to message definitions as follows:\n\n* If no\
          \ scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must\
          \ yield a [google.protobuf.Type][]\n  value in binary format, or produce\
          \ an error.\n* Applications are allowed to cache lookup results based on\
          \ the\n  URL, or have them precompiled into a binary to avoid any\n  lookup.\
          \ Therefore, binary compatibility needs to be preserved\n  on changes to\
          \ types. (Use versioned type names to manage\n  breaking changes.)\n\nNote:\
          \ this functionality is not currently available in the official\nprotobuf\
          \ release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\
          \nSchemes other than `http`, `https` (or the empty scheme) might be\nused\
          \ with implementation specific semantics."
    description: "`Any` contains an arbitrary serialized protocol buffer message along\
      \ with a\nURL that describes the type of the serialized message.\n\nProtobuf\
      \ library provides support to pack/unpack Any values in the form\nof utility\
      \ functions or additional generated methods of the Any type.\n\nExample 1: Pack\
      \ and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n\
      \    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack\
      \ and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n\
      \    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n\
      \    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n\
      \    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n\
      \      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in\
      \ Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n\
      \     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo);\
      \ err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf\
      \ library will by default use\n'type.googleapis.com/full.type.name' as the type\
      \ URL and the unpack\nmethods only use the fully qualified type name after the\
      \ last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n\
      name \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses\
      \ the regular\nrepresentation of the deserialized, embedded message, with an\n\
      additional field `@type` which contains the type URL. Example:\n\n    package\
      \ google.profile;\n    message Person {\n      string first_name = 1;\n    \
      \  string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\"\
      ,\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf\
      \ the embedded message type is well-known and has a custom JSON\nrepresentation,\
      \ that representation will be embedded adding a field\n`value` which holds the\
      \ custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\
      \n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n\
      \      \"value\": \"1.212s\"\n    }"
    example:
      '@type': "@type"
    additionalProperties: {}
  provenanceBuildProvenance:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Required. Unique identifier of the build."
      projectId:
        type: "string"
        description: "ID of the project."
      commands:
        type: "array"
        description: "Commands requested by the build."
        items:
          $ref: "#/definitions/provenanceCommand"
      builtArtifacts:
        type: "array"
        description: "Output of the build."
        items:
          $ref: "#/definitions/v1beta1provenanceArtifact"
      createTime:
        type: "string"
        format: "date-time"
        description: "Time at which the build was created."
      startTime:
        type: "string"
        format: "date-time"
        description: "Time at which execution of the build was started."
      endTime:
        type: "string"
        format: "date-time"
        description: "Time at which execution of the build was finished."
      creator:
        type: "string"
        description: "E-mail address of the user who initiated this build. Note that\
          \ this was the\nuser's e-mail address at the time the build was initiated;\
          \ this address may\nnot represent the same end-user for all time."
      logsUri:
        type: "string"
        description: "URI where any logs for this provenance were written."
      sourceProvenance:
        description: "Details of the Source input to the build."
        $ref: "#/definitions/provenanceSource"
      triggerId:
        type: "string"
        description: "Trigger identifier if the build was triggered automatically;\
          \ empty if not."
      buildOptions:
        type: "object"
        description: "Special options applied to this build. This is a catch-all field\
          \ where\nbuild providers can enter any desired additional details."
        additionalProperties:
          type: "string"
      builderVersion:
        type: "string"
        description: "Version string of the builder at the time this build was executed."
    description: "Provenance of a build. Contains all information needed to verify\
      \ the full\ndetails about the build from source to completion."
    example:
      creator: "creator"
      triggerId: "triggerId"
      buildOptions:
        key: "buildOptions"
      sourceProvenance:
        additionalContexts:
        - git:
            revisionId: "revisionId"
            url: "url"
          gerrit:
            revisionId: "revisionId"
            aliasContext:
              kind: {}
              name: "name"
            hostUri: "hostUri"
            gerritProject: "gerritProject"
          cloudRepo:
            revisionId: "revisionId"
            aliasContext:
              kind: {}
              name: "name"
            repoId:
              uid: "uid"
              projectRepoId:
                repoName: "repoName"
                projectId: "projectId"
          labels:
            key: "labels"
        - git:
            revisionId: "revisionId"
            url: "url"
          gerrit:
            revisionId: "revisionId"
            aliasContext:
              kind: {}
              name: "name"
            hostUri: "hostUri"
            gerritProject: "gerritProject"
          cloudRepo:
            revisionId: "revisionId"
            aliasContext:
              kind: {}
              name: "name"
            repoId:
              uid: "uid"
              projectRepoId:
                repoName: "repoName"
                projectId: "projectId"
          labels:
            key: "labels"
        artifactStorageSourceUri: "artifactStorageSourceUri"
        context:
          git:
            revisionId: "revisionId"
            url: "url"
          gerrit:
            revisionId: "revisionId"
            aliasContext:
              kind: {}
              name: "name"
            hostUri: "hostUri"
            gerritProject: "gerritProject"
          cloudRepo:
            revisionId: "revisionId"
            aliasContext:
              kind: {}
              name: "name"
            repoId:
              uid: "uid"
              projectRepoId:
                repoName: "repoName"
                projectId: "projectId"
          labels:
            key: "labels"
        fileHashes:
          key:
            fileHash:
            - type: {}
              value: "value"
            - type: {}
              value: "value"
      createTime: "2000-01-23T04:56:07.000+00:00"
      logsUri: "logsUri"
      builderVersion: "builderVersion"
      builtArtifacts:
      - names:
        - "names"
        - "names"
        checksum: "checksum"
        id: "id"
      - names:
        - "names"
        - "names"
        checksum: "checksum"
        id: "id"
      startTime: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      endTime: "2000-01-23T04:56:07.000+00:00"
      projectId: "projectId"
      commands:
      - args:
        - "args"
        - "args"
        name: "name"
        id: "id"
        env:
        - "env"
        - "env"
        dir: "dir"
        waitFor:
        - "waitFor"
        - "waitFor"
      - args:
        - "args"
        - "args"
        name: "name"
        id: "id"
        env:
        - "env"
        - "env"
        dir: "dir"
        waitFor:
        - "waitFor"
        - "waitFor"
  provenanceCommand:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Required. Name of the command, as presented on the command line,\
          \ or if the\ncommand is packaged as a Docker container, as presented to\
          \ `docker pull`."
      env:
        type: "array"
        description: "Environment variables set before running this command."
        items:
          type: "string"
      args:
        type: "array"
        description: "Command-line arguments used when executing this command."
        items:
          type: "string"
      dir:
        type: "string"
        description: "Working directory (relative to project source root) used when\
          \ running this\ncommand."
      id:
        type: "string"
        description: "Optional unique identifier for this command, used in wait_for\
          \ to reference\nthis command as a dependency."
      waitFor:
        type: "array"
        description: "The ID(s) of the command(s) that this command depends on."
        items:
          type: "string"
    description: "Command describes a step performed as part of the build pipeline."
    example:
      args:
      - "args"
      - "args"
      name: "name"
      id: "id"
      env:
      - "env"
      - "env"
      dir: "dir"
      waitFor:
      - "waitFor"
      - "waitFor"
  provenanceFileHashes:
    type: "object"
    properties:
      fileHash:
        type: "array"
        description: "Required. Collection of file hashes."
        items:
          $ref: "#/definitions/provenanceHash"
    description: "Container message for hashes of byte content of files, used in source\n\
      messages to verify integrity of source input to the build."
    example:
      fileHash:
      - type: {}
        value: "value"
      - type: {}
        value: "value"
  provenanceHash:
    type: "object"
    properties:
      type:
        description: "Required. The type of hash that was performed."
        $ref: "#/definitions/HashHashType"
      value:
        type: "string"
        format: "byte"
        description: "Required. The hash value."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Container message for hash values."
    example:
      type: {}
      value: "value"
  provenanceSource:
    type: "object"
    properties:
      artifactStorageSourceUri:
        type: "string"
        description: "If provided, the input binary artifacts for the build came from\
          \ this\nlocation."
      fileHashes:
        type: "object"
        description: "Hash(es) of the build source, which can be used to verify that\
          \ the original\nsource integrity was maintained in the build.\n\nThe keys\
          \ to this map are file paths used as build source and the values\ncontain\
          \ the hash values for those files.\n\nIf the build source came in a single\
          \ package such as a gzipped tarfile\n(.tar.gz), the FileHash will be for\
          \ the single path to that file."
        additionalProperties:
          $ref: "#/definitions/provenanceFileHashes"
      context:
        description: "If provided, the source code used for the build came from this\
          \ location."
        $ref: "#/definitions/sourceSourceContext"
      additionalContexts:
        type: "array"
        description: "If provided, some of the source code used for the build may\
          \ be found in\nthese locations, in the case where the source repository\
          \ had multiple\nremotes or submodules. This list will not include the context\
          \ specified in\nthe context field."
        items:
          $ref: "#/definitions/sourceSourceContext"
    description: "Source describes the location of the source used for the build."
    example:
      additionalContexts:
      - git:
          revisionId: "revisionId"
          url: "url"
        gerrit:
          revisionId: "revisionId"
          aliasContext:
            kind: {}
            name: "name"
          hostUri: "hostUri"
          gerritProject: "gerritProject"
        cloudRepo:
          revisionId: "revisionId"
          aliasContext:
            kind: {}
            name: "name"
          repoId:
            uid: "uid"
            projectRepoId:
              repoName: "repoName"
              projectId: "projectId"
        labels:
          key: "labels"
      - git:
          revisionId: "revisionId"
          url: "url"
        gerrit:
          revisionId: "revisionId"
          aliasContext:
            kind: {}
            name: "name"
          hostUri: "hostUri"
          gerritProject: "gerritProject"
        cloudRepo:
          revisionId: "revisionId"
          aliasContext:
            kind: {}
            name: "name"
          repoId:
            uid: "uid"
            projectRepoId:
              repoName: "repoName"
              projectId: "projectId"
        labels:
          key: "labels"
      artifactStorageSourceUri: "artifactStorageSourceUri"
      context:
        git:
          revisionId: "revisionId"
          url: "url"
        gerrit:
          revisionId: "revisionId"
          aliasContext:
            kind: {}
            name: "name"
          hostUri: "hostUri"
          gerritProject: "gerritProject"
        cloudRepo:
          revisionId: "revisionId"
          aliasContext:
            kind: {}
            name: "name"
          repoId:
            uid: "uid"
            projectRepoId:
              repoName: "repoName"
              projectId: "projectId"
        labels:
          key: "labels"
      fileHashes:
        key:
          fileHash:
          - type: {}
            value: "value"
          - type: {}
            value: "value"
  rpcStatus:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
      message:
        type: "string"
        description: "A developer-facing error message, which should be in English.\
          \ Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details]\
          \ field, or localized by the client."
      details:
        type: "array"
        description: "A list of messages that carry the error details.  There is a\
          \ common set of\nmessage types for APIs to use."
        items:
          $ref: "#/definitions/protobufAny"
    title: "The `Status` type defines a logical error model that is suitable for different\n\
      programming environments, including REST APIs and RPC APIs. It is used by\n\
      [gRPC](https://github.com/grpc). The error model is designed to be:"
    description: "- Simple to use and understand for most users\n- Flexible enough\
      \ to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three\
      \ pieces of data: error code, error message,\nand error details. The error code\
      \ should be an enum value of\n[google.rpc.Code][google.rpc.Code], but it may\
      \ accept additional error codes if needed.  The\nerror message should be a developer-facing\
      \ English message that helps\ndevelopers *understand* and *resolve* the error.\
      \ If a localized user-facing\nerror message is needed, put the localized message\
      \ in the error details or\nlocalize it in the client. The optional error details\
      \ may contain arbitrary\ninformation about the error. There is a predefined\
      \ set of error detail types\nin the package `google.rpc` that can be used for\
      \ common error conditions.\n\n# Language mapping\n\nThe `Status` message is\
      \ the logical representation of the error model, but it\nis not necessarily\
      \ the actual wire format. When the `Status` message is\nexposed in different\
      \ client libraries and different wire protocols, it can be\nmapped differently.\
      \ For example, it will likely be mapped to some exceptions\nin Java, but more\
      \ likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model\
      \ and the `Status` message can be used in a variety of\nenvironments, either\
      \ with or without APIs, to provide a\nconsistent developer experience across\
      \ different environments.\n\nExample uses of this error model include:\n\n-\
      \ Partial errors. If a service needs to return partial errors to the client,\n\
      \    it may embed the `Status` in the normal response to indicate the partial\n\
      \    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each\
      \ step may\n    have a `Status` message for error reporting.\n\n- Batch operations.\
      \ If a client uses batch request and batch response, the\n    `Status` message\
      \ should be used directly inside batch response, one for\n    each error sub-response.\n\
      \n- Asynchronous operations. If an API call embeds asynchronous operation\n\
      \    results in its response, the status of those operations should be\n   \
      \ represented directly using the `Status` message.\n\n- Logging. If some API\
      \ errors are stored in logs, the message `Status` could\n    be used directly\
      \ after any stripping needed for security/privacy reasons."
    example:
      code: 1
      details:
      - '@type': "@type"
      - '@type': "@type"
      message: "message"
  sourceAliasContext:
    type: "object"
    properties:
      kind:
        description: "The alias kind."
        $ref: "#/definitions/AliasContextKind"
      name:
        type: "string"
        description: "The alias name."
    description: "An alias to a repo revision."
    example:
      kind: {}
      name: "name"
  sourceCloudRepoSourceContext:
    type: "object"
    properties:
      repoId:
        description: "The ID of the repo."
        $ref: "#/definitions/sourceRepoId"
      revisionId:
        type: "string"
        description: "A revision ID."
      aliasContext:
        description: "An alias, which may be a branch or tag."
        $ref: "#/definitions/sourceAliasContext"
    description: "A CloudRepoSourceContext denotes a particular revision in a Google\
      \ Cloud\nSource Repo."
    example:
      revisionId: "revisionId"
      aliasContext:
        kind: {}
        name: "name"
      repoId:
        uid: "uid"
        projectRepoId:
          repoName: "repoName"
          projectId: "projectId"
  sourceGerritSourceContext:
    type: "object"
    properties:
      hostUri:
        type: "string"
        description: "The URI of a running Gerrit instance."
      gerritProject:
        type: "string"
        description: "The full project name within the host. Projects may be nested,\
          \ so\n\"project/subproject\" is a valid project name. The \"repo name\"\
          \ is the\nhostURI/project."
      revisionId:
        type: "string"
        description: "A revision (commit) ID."
      aliasContext:
        description: "An alias, which may be a branch or tag."
        $ref: "#/definitions/sourceAliasContext"
    description: "A SourceContext referring to a Gerrit project."
    example:
      revisionId: "revisionId"
      aliasContext:
        kind: {}
        name: "name"
      hostUri: "hostUri"
      gerritProject: "gerritProject"
  sourceGitSourceContext:
    type: "object"
    properties:
      url:
        type: "string"
        description: "Git repository URL."
      revisionId:
        type: "string"
        description: "Git commit hash."
    description: "A GitSourceContext denotes a particular revision in a third party\
      \ Git\nrepository (e.g., GitHub)."
    example:
      revisionId: "revisionId"
      url: "url"
  sourceProjectRepoId:
    type: "object"
    properties:
      projectId:
        type: "string"
        description: "The ID of the project."
      repoName:
        type: "string"
        description: "The name of the repo. Leave empty for the default repo."
    description: "Selects a repo using a Google Cloud Platform project ID (e.g.,\n\
      winged-cargo-31) and a repo name within that project."
    example:
      repoName: "repoName"
      projectId: "projectId"
  sourceRepoId:
    type: "object"
    properties:
      projectRepoId:
        description: "A combination of a project ID and a repo name."
        $ref: "#/definitions/sourceProjectRepoId"
      uid:
        type: "string"
        description: "A server-assigned, globally unique identifier."
    description: "A unique identifier for a Cloud Repo."
    example:
      uid: "uid"
      projectRepoId:
        repoName: "repoName"
        projectId: "projectId"
  sourceSourceContext:
    type: "object"
    properties:
      cloudRepo:
        description: "A SourceContext referring to a revision in a Google Cloud Source\
          \ Repo."
        $ref: "#/definitions/sourceCloudRepoSourceContext"
      gerrit:
        description: "A SourceContext referring to a Gerrit project."
        $ref: "#/definitions/sourceGerritSourceContext"
      git:
        description: "A SourceContext referring to any third party Git repo (e.g.,\
          \ GitHub)."
        $ref: "#/definitions/sourceGitSourceContext"
      labels:
        type: "object"
        description: "Labels with user defined metadata."
        additionalProperties:
          type: "string"
    description: "A SourceContext is a reference to a tree of files. A SourceContext\
      \ together\nwith a path point to a unique revision of a single file or directory."
    example:
      git:
        revisionId: "revisionId"
        url: "url"
      gerrit:
        revisionId: "revisionId"
        aliasContext:
          kind: {}
          name: "name"
        hostUri: "hostUri"
        gerritProject: "gerritProject"
      cloudRepo:
        revisionId: "revisionId"
        aliasContext:
          kind: {}
          name: "name"
        repoId:
          uid: "uid"
          projectRepoId:
            repoName: "repoName"
            projectId: "projectId"
      labels:
        key: "labels"
  spdxDocumentNote:
    type: "object"
    properties:
      spdxVersion:
        type: "string"
        title: "Provide a reference number that can be used to understand how to parse\
          \ and\ninterpret the rest of the file"
      dataLicence:
        type: "string"
        title: "Compliance with the SPDX specification includes populating the SPDX\
          \ fields\ntherein with data related to such fields (\"SPDX-Metadata\")"
    title: "DocumentNote represents an SPDX Document Creation Information section:\n\
      https://spdx.github.io/spdx-spec/2-document-creation-information/"
    example:
      dataLicence: "dataLicence"
      spdxVersion: "spdxVersion"
  spdxDocumentOccurrence:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Identify the current SPDX document which may be referenced in relationships\n\
          by other files, packages internally and documents externally"
      title:
        type: "string"
        title: "Identify name of this document as designated by creator"
      namespace:
        type: "string"
        title: "Provide an SPDX document specific namespace as a unique absolute Uniform\n\
          Resource Identifier (URI) as specified in RFC-3986, with the exception of\n\
          the ‘#’ delimiter"
      externalDocumentRefs:
        type: "array"
        title: "Identify any external SPDX documents referenced within this SPDX document"
        items:
          type: "string"
      licenseListVersion:
        type: "string"
        title: "A field for creators of the SPDX file to provide the version of\n\
          the SPDX License List used when the SPDX file was created"
      creators:
        type: "array"
        title: "Identify who (or what, in the case of a tool) created the SPDX file.\
          \ If the\nSPDX file was created by an individual, indicate the person's\
          \ name"
        items:
          type: "string"
      createTime:
        type: "string"
        format: "date-time"
        title: "Identify when the SPDX file was originally created. The date is to\
          \ be\nspecified according to combined date and time in UTC format as specified\
          \ in\nISO 8601 standard"
      creatorComment:
        type: "string"
        title: "A field for creators of the SPDX file to provide general comments\n\
          about the creation of the SPDX file or any other relevant comment not\n\
          included in the other fields"
      documentComment:
        type: "string"
        title: "A field for creators of the SPDX file content to provide comments\n\
          to the consumers of the SPDX document"
    title: "DocumentOccurrence represents an SPDX Document Creation Information\n\
      section: https://spdx.github.io/spdx-spec/2-document-creation-information/"
    example:
      creatorComment: "creatorComment"
      documentComment: "documentComment"
      licenseListVersion: "licenseListVersion"
      createTime: "2000-01-23T04:56:07.000+00:00"
      creators:
      - "creators"
      - "creators"
      namespace: "namespace"
      id: "id"
      externalDocumentRefs:
      - "externalDocumentRefs"
      - "externalDocumentRefs"
      title: "title"
  spdxFileNote:
    type: "object"
    properties:
      title:
        type: "string"
        title: "Identify the full path and filename that corresponds to the file\n\
          information in this section"
      fileType:
        title: "This field provides information about the type of file identified"
        $ref: "#/definitions/FileNoteFileType"
      checksum:
        type: "array"
        title: "Provide a unique identifier to match analysis information on each\
          \ specific\nfile in a package"
        items:
          type: "string"
    title: "FileNote represents an SPDX File Information\nsection: https://spdx.github.io/spdx-spec/4-file-information/"
    example:
      checksum:
      - "checksum"
      - "checksum"
      title: "title"
      fileType: {}
  spdxFileOccurrence:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Uniquely identify any element in an SPDX document which may be referenced\n\
          by other elements"
      licenseConcluded:
        title: "This field contains the license the SPDX file creator has concluded\
          \ as\ngoverning the file or alternative values if the governing license\
          \ cannot be\ndetermined"
        $ref: "#/definitions/v1beta1License"
      filesLicenseInfo:
        type: "array"
        title: "This field contains the license information actually found in the\
          \ file, if\nany"
        items:
          type: "string"
      copyright:
        type: "string"
        title: "Identify the copyright holder of the file, as well as any dates present"
      comment:
        type: "string"
        title: "This field provides a place for the SPDX file creator to record any\
          \ general\ncomments about the file"
      notice:
        type: "string"
        title: "This field provides a place for the SPDX file creator to record license\n\
          notices or other such related notices found in the file"
      contributors:
        type: "array"
        title: "This field provides a place for the SPDX file creator to record file\n\
          contributors"
        items:
          type: "string"
      attributions:
        type: "array"
        title: "This field provides a place for the SPDX data creator to record, at\
          \ the\nfile level, acknowledgements that may be needed to be communicated\
          \ in\nsome contexts"
        items:
          type: "string"
    title: "FileOccurrence represents an SPDX File Information\nsection: https://spdx.github.io/spdx-spec/4-file-information/"
    example:
      copyright: "copyright"
      licenseConcluded:
        expression: "expression"
        comments: "comments"
      filesLicenseInfo:
      - "filesLicenseInfo"
      - "filesLicenseInfo"
      comment: "comment"
      id: "id"
      contributors:
      - "contributors"
      - "contributors"
      attributions:
      - "attributions"
      - "attributions"
      notice: "notice"
  spdxPackageInfoNote:
    type: "object"
    properties:
      title:
        type: "string"
        title: "Identify the full name of the package as given by the Package Originator"
      version:
        type: "string"
        title: "Identify the version of the package"
      supplier:
        type: "string"
        title: "Identify the actual distribution source for the package/directory\n\
          identified in the SPDX file"
      originator:
        type: "string"
        title: "If the package identified in the SPDX file originated from a different\n\
          person or organization than identified as Package Supplier, this field\n\
          identifies from where or whom the package originally came"
      downloadLocation:
        type: "string"
        title: "This section identifies the download Universal Resource Locator (URL),\
          \ or\n a specific location within a version control system (VCS) for the\
          \ package\n at the time that the SPDX file was created"
      analyzed:
        type: "boolean"
        title: "Indicates whether the file content of this package has been available\
          \ for\nor subjected to analysis when creating the SPDX document"
      verificationCode:
        type: "string"
        title: "This field provides an independently reproducible mechanism identifying\n\
          specific contents of a package based on the actual files (except the SPDX\n\
          file itself, if it is included in the package) that make up each package\n\
          and that correlates to the data in this SPDX file"
      checksum:
        type: "string"
        title: "Provide an independently reproducible mechanism that permits unique\n\
          identification of a specific package that correlates to the data in this\n\
          SPDX file"
      homePage:
        type: "string"
        title: "Provide a place for the SPDX file creator to record a web site that\
          \ serves\nas the package's home page"
      filesLicenseInfo:
        type: "array"
        title: "Contain the license the SPDX file creator has concluded as governing\
          \ the\nThis field is to contain a list of all licenses found in the package.\
          \ The\nrelationship between licenses (i.e., conjunctive, disjunctive) is\
          \ not\nspecified in this field – it is simply a listing of all licenses\
          \ found"
        items:
          type: "string"
      licenseDeclared:
        title: "List the licenses that have been declared by the authors of the package"
        $ref: "#/definitions/v1beta1License"
      copyright:
        type: "string"
        title: "Identify the copyright holders of the package, as well as any dates\
          \ present"
      summaryDescription:
        type: "string"
        title: "A short description of the package"
      detailedDescription:
        type: "string"
        title: "A more detailed description of the package"
      externalRefs:
        type: "array"
        title: "ExternalRef"
        items:
          $ref: "#/definitions/PackageInfoNoteExternalRef"
      attribution:
        type: "string"
        title: "A place for the SPDX data creator to record, at the package level,\n\
          acknowledgements that may be needed to be communicated in some contexts"
      packageType:
        type: "string"
        description: "The type of package: OS, MAVEN, GO, GO_STDLIB, etc."
    title: "PackageInfoNote represents an SPDX Package Information\nsection: https://spdx.github.io/spdx-spec/3-package-information/"
    example:
      copyright: "copyright"
      filesLicenseInfo:
      - "filesLicenseInfo"
      - "filesLicenseInfo"
      analyzed: true
      externalRefs:
      - comment: "comment"
        category: {}
        type: "type"
        locator: "locator"
      - comment: "comment"
        category: {}
        type: "type"
        locator: "locator"
      downloadLocation: "downloadLocation"
      originator: "originator"
      title: "title"
      version: "version"
      homePage: "homePage"
      packageType: "packageType"
      verificationCode: "verificationCode"
      detailedDescription: "detailedDescription"
      supplier: "supplier"
      checksum: "checksum"
      attribution: "attribution"
      licenseDeclared:
        expression: "expression"
        comments: "comments"
      summaryDescription: "summaryDescription"
  spdxPackageInfoOccurrence:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Uniquely identify any element in an SPDX document which may be referenced\n\
          by other elements"
      filename:
        type: "string"
        title: "Provide the actual file name of the package, or path of the directory\
          \ being\ntreated as a package"
      sourceInfo:
        type: "string"
        title: "Provide a place for the SPDX file creator to record any relevant background\n\
          information or additional comments about the origin of the package"
      licenseConcluded:
        title: "package or alternative values, if the governing license cannot be\n\
          determined"
        $ref: "#/definitions/v1beta1License"
      comment:
        type: "string"
        title: "A place for the SPDX file creator to record any general\ncomments\
          \ about the package being described"
      packageType:
        type: "string"
        description: "The type of package: OS, MAVEN, GO, GO_STDLIB, etc."
        readOnly: true
      title:
        type: "string"
        title: "Identify the full name of the package as given by the Package Originator"
        readOnly: true
      version:
        type: "string"
        title: "Identify the version of the package"
        readOnly: true
      homePage:
        type: "string"
        title: "Provide a place for the SPDX file creator to record a web site that\
          \ serves\nas the package's home page"
        readOnly: true
      summaryDescription:
        type: "string"
        title: "A short description of the package"
        readOnly: true
    title: "PackageInfoOccurrence represents an SPDX Package Information\nsection:\
      \ https://spdx.github.io/spdx-spec/3-package-information/"
    example:
      sourceInfo: "sourceInfo"
      filename: "filename"
      licenseConcluded:
        expression: "expression"
        comments: "comments"
      comment: "comment"
      id: "id"
      title: "title"
      packageType: "packageType"
      version: "version"
      homePage: "homePage"
      summaryDescription: "summaryDescription"
  spdxRelationshipNote:
    type: "object"
    properties:
      type:
        title: "The type of relationship between the source and target SPDX elements"
        $ref: "#/definitions/spdxRelationshipType"
    title: "RelationshipNote represents an SPDX Relationship\nsection:\nhttps://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/"
    example:
      type: {}
  spdxRelationshipOccurrence:
    type: "object"
    properties:
      source:
        type: "string"
        title: "Also referred to as SPDXRef-A\nThe source SPDX element (file, package,\
          \ etc)"
      target:
        type: "string"
        title: "Also referred to as SPDXRef-B\nThe target SPDC element (file, package,\
          \ etc)\nIn cases where there are \"known unknowns\", the use of the keyword\n\
          NOASSERTION can be used The keywords NONE can be used to indicate that an\n\
          SPDX element (package/file/snippet) has no other elements connected by\n\
          some relationship to it"
      type:
        title: "The type of relationship between the source and target SPDX elements"
        $ref: "#/definitions/spdxRelationshipType"
      comment:
        type: "string"
        title: "A place for the SPDX file creator to record any general comments about\n\
          the relationship"
    title: "RelationshipOccurrence represents an SPDX Relationship\nsection:\nhttps://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/"
    example:
      comment: "comment"
      source: "source"
      type: {}
      target: "target"
  spdxRelationshipType:
    type: "string"
    title: "The type of relationship between the source and target SPDX elements\n\
      RelationshipOccurrence represents an SPDX Relationship section:\nhttps://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/"
    description: "- RELATIONSHIP_TYPE_UNSPECIFIED: Unspecified\n - DESCRIBES: Is to\
      \ be used when SPDXRef-DOCUMENT describes SPDXRef-A\n - DESCRIBED_BY: Is to\
      \ be used when SPDXRef-A is described by SPDXREF-Document\n - CONTAINS: Is to\
      \ be used when SPDXRef-A contains SPDXRef-B\n - CONTAINED_BY: Is to be used\
      \ when SPDXRef-A is contained by SPDXRef-B\n - DEPENDS_ON: Is to be used when\
      \ SPDXRef-A depends on SPDXRef-B\n - DEPENDENCY_OF: Is to be used when SPDXRef-A\
      \ is dependency of SPDXRef-B\n - DEPENDENCY_MANIFEST_OF: Is to be used when\
      \ SPDXRef-A is a manifest file that lists a set of\ndependencies for SPDXRef-B\n\
      \ - BUILD_DEPENDENCY_OF: Is to be used when SPDXRef-A is a build dependency\
      \ of SPDXRef-B\n - DEV_DEPENDENCY_OF: Is to be used when SPDXRef-A is a development\
      \ dependency of SPDXRef-B\n - OPTIONAL_DEPENDENCY_OF: Is to be used when SPDXRef-A\
      \ is an optional dependency of SPDXRef-B\n - PROVIDED_DEPENDENCY_OF: Is to be\
      \ used when SPDXRef-A is a to be provided dependency of\nSPDXRef-B\n - TEST_DEPENDENCY_OF:\
      \ Is to be used when SPDXRef-A is a test dependency of SPDXRef-B\n - RUNTIME_DEPENDENCY_OF:\
      \ Is to be used when SPDXRef-A is a dependency required for the execution\n\
      of SPDXRef-B\n - EXAMPLE_OF: Is to be used when SPDXRef-A is an example of SPDXRef-B\n\
      \ - GENERATES: Is to be used when SPDXRef-A generates SPDXRef-B\n - GENERATED_FROM:\
      \ Is to be used when SPDXRef-A was generated from SPDXRef-B\n - ANCESTOR_OF:\
      \ Is to be used when SPDXRef-A is an ancestor (same lineage but\npre-dates)\
      \ SPDXRef-B\n - DESCENDANT_OF: Is to be used when SPDXRef-A is a descendant\
      \ of (same lineage but\npostdates) SPDXRef-B\n - VARIANT_OF: Is to be used when\
      \ SPDXRef-A is a variant of (same lineage but not\nclear which came first) SPDXRef-B\n\
      \ - DISTRIBUTION_ARTIFACT: Is to be used when distributing SPDXRef-A requires\
      \ that SPDXRef-B also\nbe distributed\n - PATCH_FOR: Is to be used when SPDXRef-A\
      \ is a patch file for (to be applied to)\nSPDXRef-B\n - PATCH_APPLIED: Is to\
      \ be used when SPDXRef-A is a patch file that has been applied to\nSPDXRef-B\n\
      \ - COPY_OF: Is to be used when SPDXRef-A is an exact copy of SPDXRef-B\n -\
      \ FILE_ADDED: Is to be used when SPDXRef-A is a file that was added to SPDXRef-B\n\
      \ - FILE_DELETED: Is to be used when SPDXRef-A is a file that was deleted from\
      \ SPDXRef-B\n - FILE_MODIFIED: Is to be used when SPDXRef-A is a file that was\
      \ modified from SPDXRef-B\n - EXPANDED_FROM_ARCHIVE: Is to be used when SPDXRef-A\
      \ is expanded from the archive SPDXRef-B\n - DYNAMIC_LINK: Is to be used when\
      \ SPDXRef-A dynamically links to SPDXRef-B\n - STATIC_LINK: Is to be used when\
      \ SPDXRef-A statically links to SPDXRef-B\n - DATA_FILE_OF: Is to be used when\
      \ SPDXRef-A is a data file used in SPDXRef-B\n - TEST_CASE_OF: Is to be used\
      \ when SPDXRef-A is a test case used in testing SPDXRef-B\n - BUILD_TOOL_OF:\
      \ Is to be used when SPDXRef-A is used to build SPDXRef-B\n - DEV_TOOL_OF: Is\
      \ to be used when SPDXRef-A is used as a development tool for\nSPDXRef-B\n -\
      \ TEST_OF: Is to be used when SPDXRef-A is used for testing SPDXRef-B\n - TEST_TOOL_OF:\
      \ Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B\n - DOCUMENTATION_OF:\
      \ Is to be used when SPDXRef-A provides documentation of SPDXRef-B\n - OPTIONAL_COMPONENT_OF:\
      \ Is to be used when SPDXRef-A is an optional component of SPDXRef-B\n - METAFILE_OF:\
      \ Is to be used when SPDXRef-A is a metafile of SPDXRef-B\n - PACKAGE_OF: Is\
      \ to be used when SPDXRef-A is used as a package as part of SPDXRef-B\n - AMENDS:\
      \ Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX\ninformation\
      \ in SPDXRef-B\n - PREREQUISITE_FOR: Is to be used when SPDXRef-A is a prerequisite\
      \ for SPDXRef-B\n - HAS_PREREQUISITE: Is to be used when SPDXRef-A has as a\
      \ prerequisite SPDXRef-B\n - OTHER: Is to be used for a relationship which has\
      \ not been defined in the\nformal SPDX specification. A description of the relationship\
      \ should be\nincluded in the Relationship comments field"
    enum:
    - "RELATIONSHIP_TYPE_UNSPECIFIED"
    - "DESCRIBES"
    - "DESCRIBED_BY"
    - "CONTAINS"
    - "CONTAINED_BY"
    - "DEPENDS_ON"
    - "DEPENDENCY_OF"
    - "DEPENDENCY_MANIFEST_OF"
    - "BUILD_DEPENDENCY_OF"
    - "DEV_DEPENDENCY_OF"
    - "OPTIONAL_DEPENDENCY_OF"
    - "PROVIDED_DEPENDENCY_OF"
    - "TEST_DEPENDENCY_OF"
    - "RUNTIME_DEPENDENCY_OF"
    - "EXAMPLE_OF"
    - "GENERATES"
    - "GENERATED_FROM"
    - "ANCESTOR_OF"
    - "DESCENDANT_OF"
    - "VARIANT_OF"
    - "DISTRIBUTION_ARTIFACT"
    - "PATCH_FOR"
    - "PATCH_APPLIED"
    - "COPY_OF"
    - "FILE_ADDED"
    - "FILE_DELETED"
    - "FILE_MODIFIED"
    - "EXPANDED_FROM_ARCHIVE"
    - "DYNAMIC_LINK"
    - "STATIC_LINK"
    - "DATA_FILE_OF"
    - "TEST_CASE_OF"
    - "BUILD_TOOL_OF"
    - "DEV_TOOL_OF"
    - "TEST_OF"
    - "TEST_TOOL_OF"
    - "DOCUMENTATION_OF"
    - "OPTIONAL_COMPONENT_OF"
    - "METAFILE_OF"
    - "PACKAGE_OF"
    - "AMENDS"
    - "PREREQUISITE_FOR"
    - "HAS_PREREQUISITE"
    - "OTHER"
    default: "RELATIONSHIP_TYPE_UNSPECIFIED"
  v1beta1BatchCreateNotesResponse:
    type: "object"
    properties:
      notes:
        type: "array"
        description: "The notes that were created."
        items:
          $ref: "#/definitions/v1beta1Note"
    description: "Response for creating notes in batch."
    example:
      notes:
      - longDescription: "longDescription"
        package:
          license:
            expression: "expression"
            comments: "comments"
          name: "name"
          digest:
          - digestBytes: "digestBytes"
            algo: "algo"
          - digestBytes: "digestBytes"
            algo: "algo"
          description: "description"
          distribution:
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          packageType: "packageType"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          maintainer: "maintainer"
          url: "url"
        kind: {}
        vulnerabilityAssessment:
          longDescription: "longDescription"
          assessment:
            longDescription: "longDescription"
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            shortDescription: "shortDescription"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
          product:
            genericUri: "genericUri"
            name: "name"
            id: "id"
          publisher:
            issuingAuthority: "issuingAuthority"
            name: "name"
            context: "context"
          shortDescription: "shortDescription"
          title: "title"
          languageCode: "languageCode"
        baseImage:
          resourceUrl: "resourceUrl"
          fingerprint:
            v1Name: "v1Name"
            v2Blob:
            - "v2Blob"
            - "v2Blob"
            v2Name: "v2Name"
        attestationAuthority:
          hint:
            humanReadableName: "humanReadableName"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          expectedMaterials:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          signingKeys:
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          expectedProducts:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          stepName: "stepName"
          threshold: "threshold"
          expectedCommand:
          - "expectedCommand"
          - "expectedCommand"
        shortDescription: "shortDescription"
        vulnerability:
          severity: {}
          cwe:
          - "cwe"
          - "cwe"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          cvssVersion: {}
          details:
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          windowsDetails:
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
        spdxRelationship:
          type: {}
        relatedNoteNames:
        - "relatedNoteNames"
        - "relatedNoteNames"
        spdxFile:
          checksum:
          - "checksum"
          - "checksum"
          title: "title"
          fileType: {}
        deployable:
          resourceUri:
          - "resourceUri"
          - "resourceUri"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          signature:
            signature: "signature"
            keyId: "keyId"
            publicKey: "publicKey"
            keyType: {}
          builderVersion: "builderVersion"
        expirationTime: "2000-01-23T04:56:07.000+00:00"
        discovery: {}
        spdxPackage:
          copyright: "copyright"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          analyzed: true
          externalRefs:
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          downloadLocation: "downloadLocation"
          originator: "originator"
          title: "title"
          version: "version"
          homePage: "homePage"
          packageType: "packageType"
          verificationCode: "verificationCode"
          detailedDescription: "detailedDescription"
          supplier: "supplier"
          checksum: "checksum"
          attribution: "attribution"
          licenseDeclared:
            expression: "expression"
            comments: "comments"
          summaryDescription: "summaryDescription"
        name: "name"
        sbom:
          dataLicence: "dataLicence"
          spdxVersion: "spdxVersion"
        relatedUrl:
        - label: "label"
          url: "url"
        - label: "label"
          url: "url"
      - longDescription: "longDescription"
        package:
          license:
            expression: "expression"
            comments: "comments"
          name: "name"
          digest:
          - digestBytes: "digestBytes"
            algo: "algo"
          - digestBytes: "digestBytes"
            algo: "algo"
          description: "description"
          distribution:
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          packageType: "packageType"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          maintainer: "maintainer"
          url: "url"
        kind: {}
        vulnerabilityAssessment:
          longDescription: "longDescription"
          assessment:
            longDescription: "longDescription"
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            shortDescription: "shortDescription"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
          product:
            genericUri: "genericUri"
            name: "name"
            id: "id"
          publisher:
            issuingAuthority: "issuingAuthority"
            name: "name"
            context: "context"
          shortDescription: "shortDescription"
          title: "title"
          languageCode: "languageCode"
        baseImage:
          resourceUrl: "resourceUrl"
          fingerprint:
            v1Name: "v1Name"
            v2Blob:
            - "v2Blob"
            - "v2Blob"
            v2Name: "v2Name"
        attestationAuthority:
          hint:
            humanReadableName: "humanReadableName"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          expectedMaterials:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          signingKeys:
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          expectedProducts:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          stepName: "stepName"
          threshold: "threshold"
          expectedCommand:
          - "expectedCommand"
          - "expectedCommand"
        shortDescription: "shortDescription"
        vulnerability:
          severity: {}
          cwe:
          - "cwe"
          - "cwe"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          cvssVersion: {}
          details:
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          windowsDetails:
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
        spdxRelationship:
          type: {}
        relatedNoteNames:
        - "relatedNoteNames"
        - "relatedNoteNames"
        spdxFile:
          checksum:
          - "checksum"
          - "checksum"
          title: "title"
          fileType: {}
        deployable:
          resourceUri:
          - "resourceUri"
          - "resourceUri"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          signature:
            signature: "signature"
            keyId: "keyId"
            publicKey: "publicKey"
            keyType: {}
          builderVersion: "builderVersion"
        expirationTime: "2000-01-23T04:56:07.000+00:00"
        discovery: {}
        spdxPackage:
          copyright: "copyright"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          analyzed: true
          externalRefs:
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          downloadLocation: "downloadLocation"
          originator: "originator"
          title: "title"
          version: "version"
          homePage: "homePage"
          packageType: "packageType"
          verificationCode: "verificationCode"
          detailedDescription: "detailedDescription"
          supplier: "supplier"
          checksum: "checksum"
          attribution: "attribution"
          licenseDeclared:
            expression: "expression"
            comments: "comments"
          summaryDescription: "summaryDescription"
        name: "name"
        sbom:
          dataLicence: "dataLicence"
          spdxVersion: "spdxVersion"
        relatedUrl:
        - label: "label"
          url: "url"
        - label: "label"
          url: "url"
  v1beta1BatchCreateOccurrencesResponse:
    type: "object"
    properties:
      occurrences:
        type: "array"
        description: "The occurrences that were created."
        items:
          $ref: "#/definitions/v1beta1Occurrence"
    description: "Response for creating occurrences in batch."
    example:
      occurrences:
      - discovered:
          discovered:
            analysisCompleted:
              analysisType:
              - "analysisType"
              - "analysisType"
            analysisError:
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            analysisStatusError:
              code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            continuousAnalysis: {}
            lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
            analysisStatus: {}
        attestation:
          attestation:
            genericSignedAttestation:
              serializedPayload: "serializedPayload"
              contentType: {}
              signatures:
              - signature: "signature"
                publicKeyId: "publicKeyId"
              - signature: "signature"
                publicKeyId: "publicKeyId"
            pgpSignedAttestation:
              signature: "signature"
              pgpKeyId: "pgpKeyId"
              contentType: {}
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        noteName: "noteName"
        kind: {}
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          signed:
            environment:
              customValues:
                key: "customValues"
            materials:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            byproducts:
              customValues:
                key: "customValues"
            command:
            - "command"
            - "command"
            products:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        vulnerability:
          severity: {}
          longDescription: "longDescription"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          relatedUrls:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          cvssVersion: {}
          packageIssue:
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          shortDescription: "shortDescription"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          type: "type"
          vexAssessment:
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            noteName: "noteName"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
        spdxRelationship:
          comment: "comment"
          source: "source"
          type: {}
          target: "target"
        spdxFile:
          copyright: "copyright"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          comment: "comment"
          id: "id"
          contributors:
          - "contributors"
          - "contributors"
          attributions:
          - "attributions"
          - "attributions"
          notice: "notice"
        remediation: "remediation"
        envelope:
          payloadType: "payloadType"
          payload: "payload"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          provenance:
            creator: "creator"
            triggerId: "triggerId"
            buildOptions:
              key: "buildOptions"
            sourceProvenance:
              additionalContexts:
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              artifactStorageSourceUri: "artifactStorageSourceUri"
              context:
                git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              fileHashes:
                key:
                  fileHash:
                  - type: {}
                    value: "value"
                  - type: {}
                    value: "value"
            createTime: "2000-01-23T04:56:07.000+00:00"
            logsUri: "logsUri"
            builderVersion: "builderVersion"
            builtArtifacts:
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            startTime: "2000-01-23T04:56:07.000+00:00"
            id: "id"
            endTime: "2000-01-23T04:56:07.000+00:00"
            projectId: "projectId"
            commands:
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
          provenanceBytes: "provenanceBytes"
        spdxPackage:
          sourceInfo: "sourceInfo"
          filename: "filename"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          comment: "comment"
          id: "id"
          title: "title"
          packageType: "packageType"
          version: "version"
          homePage: "homePage"
          summaryDescription: "summaryDescription"
        installation:
          installation:
            license:
              expression: "expression"
              comments: "comments"
            name: "name"
            location:
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            architecture: {}
        name: "name"
        sbom:
          creatorComment: "creatorComment"
          documentComment: "documentComment"
          licenseListVersion: "licenseListVersion"
          createTime: "2000-01-23T04:56:07.000+00:00"
          creators:
          - "creators"
          - "creators"
          namespace: "namespace"
          id: "id"
          externalDocumentRefs:
          - "externalDocumentRefs"
          - "externalDocumentRefs"
          title: "title"
        derivedImage:
          derivedImage:
            distance: 6
            fingerprint:
              v1Name: "v1Name"
              v2Blob:
              - "v2Blob"
              - "v2Blob"
              v2Name: "v2Name"
            baseResourceUrl: "baseResourceUrl"
            layerInfo:
            - arguments: "arguments"
              directive: {}
            - arguments: "arguments"
              directive: {}
        deployment:
          deployment:
            address: "address"
            undeployTime: "2000-01-23T04:56:07.000+00:00"
            userEmail: "userEmail"
            deployTime: "2000-01-23T04:56:07.000+00:00"
            resourceUri:
            - "resourceUri"
            - "resourceUri"
            config: "config"
            platform: {}
      - discovered:
          discovered:
            analysisCompleted:
              analysisType:
              - "analysisType"
              - "analysisType"
            analysisError:
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            analysisStatusError:
              code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            continuousAnalysis: {}
            lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
            analysisStatus: {}
        attestation:
          attestation:
            genericSignedAttestation:
              serializedPayload: "serializedPayload"
              contentType: {}
              signatures:
              - signature: "signature"
                publicKeyId: "publicKeyId"
              - signature: "signature"
                publicKeyId: "publicKeyId"
            pgpSignedAttestation:
              signature: "signature"
              pgpKeyId: "pgpKeyId"
              contentType: {}
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        noteName: "noteName"
        kind: {}
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          signed:
            environment:
              customValues:
                key: "customValues"
            materials:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            byproducts:
              customValues:
                key: "customValues"
            command:
            - "command"
            - "command"
            products:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        vulnerability:
          severity: {}
          longDescription: "longDescription"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          relatedUrls:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          cvssVersion: {}
          packageIssue:
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          shortDescription: "shortDescription"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          type: "type"
          vexAssessment:
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            noteName: "noteName"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
        spdxRelationship:
          comment: "comment"
          source: "source"
          type: {}
          target: "target"
        spdxFile:
          copyright: "copyright"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          comment: "comment"
          id: "id"
          contributors:
          - "contributors"
          - "contributors"
          attributions:
          - "attributions"
          - "attributions"
          notice: "notice"
        remediation: "remediation"
        envelope:
          payloadType: "payloadType"
          payload: "payload"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          provenance:
            creator: "creator"
            triggerId: "triggerId"
            buildOptions:
              key: "buildOptions"
            sourceProvenance:
              additionalContexts:
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              artifactStorageSourceUri: "artifactStorageSourceUri"
              context:
                git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              fileHashes:
                key:
                  fileHash:
                  - type: {}
                    value: "value"
                  - type: {}
                    value: "value"
            createTime: "2000-01-23T04:56:07.000+00:00"
            logsUri: "logsUri"
            builderVersion: "builderVersion"
            builtArtifacts:
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            startTime: "2000-01-23T04:56:07.000+00:00"
            id: "id"
            endTime: "2000-01-23T04:56:07.000+00:00"
            projectId: "projectId"
            commands:
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
          provenanceBytes: "provenanceBytes"
        spdxPackage:
          sourceInfo: "sourceInfo"
          filename: "filename"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          comment: "comment"
          id: "id"
          title: "title"
          packageType: "packageType"
          version: "version"
          homePage: "homePage"
          summaryDescription: "summaryDescription"
        installation:
          installation:
            license:
              expression: "expression"
              comments: "comments"
            name: "name"
            location:
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            architecture: {}
        name: "name"
        sbom:
          creatorComment: "creatorComment"
          documentComment: "documentComment"
          licenseListVersion: "licenseListVersion"
          createTime: "2000-01-23T04:56:07.000+00:00"
          creators:
          - "creators"
          - "creators"
          namespace: "namespace"
          id: "id"
          externalDocumentRefs:
          - "externalDocumentRefs"
          - "externalDocumentRefs"
          title: "title"
        derivedImage:
          derivedImage:
            distance: 6
            fingerprint:
              v1Name: "v1Name"
              v2Blob:
              - "v2Blob"
              - "v2Blob"
              v2Name: "v2Name"
            baseResourceUrl: "baseResourceUrl"
            layerInfo:
            - arguments: "arguments"
              directive: {}
            - arguments: "arguments"
              directive: {}
        deployment:
          deployment:
            address: "address"
            undeployTime: "2000-01-23T04:56:07.000+00:00"
            userEmail: "userEmail"
            deployTime: "2000-01-23T04:56:07.000+00:00"
            resourceUri:
            - "resourceUri"
            - "resourceUri"
            config: "config"
            platform: {}
  v1beta1Digest:
    type: "object"
    properties:
      algo:
        type: "string"
        description: "`SHA1`, `SHA512` etc."
      digestBytes:
        type: "string"
        format: "byte"
        description: "Value of the digest."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Digest information."
    example:
      digestBytes: "digestBytes"
      algo: "algo"
  v1beta1Envelope:
    type: "object"
    properties:
      payload:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      payloadType:
        type: "string"
      signatures:
        type: "array"
        items:
          $ref: "#/definitions/v1beta1EnvelopeSignature"
    description: "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto.\n\
      An authenticated message of arbitrary type."
    example:
      payloadType: "payloadType"
      payload: "payload"
      signatures:
      - sig: "sig"
        keyid: "keyid"
      - sig: "sig"
        keyid: "keyid"
  v1beta1EnvelopeSignature:
    type: "object"
    properties:
      sig:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      keyid:
        type: "string"
    example:
      sig: "sig"
      keyid: "keyid"
  v1beta1License:
    type: "object"
    properties:
      expression:
        type: "string"
        description: "Often a single license can be used to represent the licensing\
          \ terms.\nSometimes it is necessary to include a choice of one or more licenses\n\
          or some combination of license identifiers.\nExamples: \"LGPL-2.1-only OR\
          \ MIT\", \"LGPL-2.1-only AND MIT\",\n\"GPL-2.0-or-later WITH Bison-exception-2.2\"\
          ."
      comments:
        type: "string"
        title: "Comments"
    description: "License information."
    example:
      expression: "expression"
      comments: "comments"
  v1beta1ListNoteOccurrencesResponse:
    type: "object"
    properties:
      occurrences:
        type: "array"
        description: "The occurrences attached to the specified note."
        items:
          $ref: "#/definitions/v1beta1Occurrence"
      nextPageToken:
        type: "string"
        description: "Token to provide to skip to a particular spot in the list."
    description: "Response for listing occurrences for a note."
    example:
      occurrences:
      - discovered:
          discovered:
            analysisCompleted:
              analysisType:
              - "analysisType"
              - "analysisType"
            analysisError:
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            analysisStatusError:
              code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            continuousAnalysis: {}
            lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
            analysisStatus: {}
        attestation:
          attestation:
            genericSignedAttestation:
              serializedPayload: "serializedPayload"
              contentType: {}
              signatures:
              - signature: "signature"
                publicKeyId: "publicKeyId"
              - signature: "signature"
                publicKeyId: "publicKeyId"
            pgpSignedAttestation:
              signature: "signature"
              pgpKeyId: "pgpKeyId"
              contentType: {}
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        noteName: "noteName"
        kind: {}
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          signed:
            environment:
              customValues:
                key: "customValues"
            materials:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            byproducts:
              customValues:
                key: "customValues"
            command:
            - "command"
            - "command"
            products:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        vulnerability:
          severity: {}
          longDescription: "longDescription"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          relatedUrls:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          cvssVersion: {}
          packageIssue:
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          shortDescription: "shortDescription"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          type: "type"
          vexAssessment:
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            noteName: "noteName"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
        spdxRelationship:
          comment: "comment"
          source: "source"
          type: {}
          target: "target"
        spdxFile:
          copyright: "copyright"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          comment: "comment"
          id: "id"
          contributors:
          - "contributors"
          - "contributors"
          attributions:
          - "attributions"
          - "attributions"
          notice: "notice"
        remediation: "remediation"
        envelope:
          payloadType: "payloadType"
          payload: "payload"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          provenance:
            creator: "creator"
            triggerId: "triggerId"
            buildOptions:
              key: "buildOptions"
            sourceProvenance:
              additionalContexts:
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              artifactStorageSourceUri: "artifactStorageSourceUri"
              context:
                git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              fileHashes:
                key:
                  fileHash:
                  - type: {}
                    value: "value"
                  - type: {}
                    value: "value"
            createTime: "2000-01-23T04:56:07.000+00:00"
            logsUri: "logsUri"
            builderVersion: "builderVersion"
            builtArtifacts:
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            startTime: "2000-01-23T04:56:07.000+00:00"
            id: "id"
            endTime: "2000-01-23T04:56:07.000+00:00"
            projectId: "projectId"
            commands:
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
          provenanceBytes: "provenanceBytes"
        spdxPackage:
          sourceInfo: "sourceInfo"
          filename: "filename"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          comment: "comment"
          id: "id"
          title: "title"
          packageType: "packageType"
          version: "version"
          homePage: "homePage"
          summaryDescription: "summaryDescription"
        installation:
          installation:
            license:
              expression: "expression"
              comments: "comments"
            name: "name"
            location:
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            architecture: {}
        name: "name"
        sbom:
          creatorComment: "creatorComment"
          documentComment: "documentComment"
          licenseListVersion: "licenseListVersion"
          createTime: "2000-01-23T04:56:07.000+00:00"
          creators:
          - "creators"
          - "creators"
          namespace: "namespace"
          id: "id"
          externalDocumentRefs:
          - "externalDocumentRefs"
          - "externalDocumentRefs"
          title: "title"
        derivedImage:
          derivedImage:
            distance: 6
            fingerprint:
              v1Name: "v1Name"
              v2Blob:
              - "v2Blob"
              - "v2Blob"
              v2Name: "v2Name"
            baseResourceUrl: "baseResourceUrl"
            layerInfo:
            - arguments: "arguments"
              directive: {}
            - arguments: "arguments"
              directive: {}
        deployment:
          deployment:
            address: "address"
            undeployTime: "2000-01-23T04:56:07.000+00:00"
            userEmail: "userEmail"
            deployTime: "2000-01-23T04:56:07.000+00:00"
            resourceUri:
            - "resourceUri"
            - "resourceUri"
            config: "config"
            platform: {}
      - discovered:
          discovered:
            analysisCompleted:
              analysisType:
              - "analysisType"
              - "analysisType"
            analysisError:
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            analysisStatusError:
              code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            continuousAnalysis: {}
            lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
            analysisStatus: {}
        attestation:
          attestation:
            genericSignedAttestation:
              serializedPayload: "serializedPayload"
              contentType: {}
              signatures:
              - signature: "signature"
                publicKeyId: "publicKeyId"
              - signature: "signature"
                publicKeyId: "publicKeyId"
            pgpSignedAttestation:
              signature: "signature"
              pgpKeyId: "pgpKeyId"
              contentType: {}
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        noteName: "noteName"
        kind: {}
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          signed:
            environment:
              customValues:
                key: "customValues"
            materials:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            byproducts:
              customValues:
                key: "customValues"
            command:
            - "command"
            - "command"
            products:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        vulnerability:
          severity: {}
          longDescription: "longDescription"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          relatedUrls:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          cvssVersion: {}
          packageIssue:
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          shortDescription: "shortDescription"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          type: "type"
          vexAssessment:
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            noteName: "noteName"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
        spdxRelationship:
          comment: "comment"
          source: "source"
          type: {}
          target: "target"
        spdxFile:
          copyright: "copyright"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          comment: "comment"
          id: "id"
          contributors:
          - "contributors"
          - "contributors"
          attributions:
          - "attributions"
          - "attributions"
          notice: "notice"
        remediation: "remediation"
        envelope:
          payloadType: "payloadType"
          payload: "payload"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          provenance:
            creator: "creator"
            triggerId: "triggerId"
            buildOptions:
              key: "buildOptions"
            sourceProvenance:
              additionalContexts:
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              artifactStorageSourceUri: "artifactStorageSourceUri"
              context:
                git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              fileHashes:
                key:
                  fileHash:
                  - type: {}
                    value: "value"
                  - type: {}
                    value: "value"
            createTime: "2000-01-23T04:56:07.000+00:00"
            logsUri: "logsUri"
            builderVersion: "builderVersion"
            builtArtifacts:
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            startTime: "2000-01-23T04:56:07.000+00:00"
            id: "id"
            endTime: "2000-01-23T04:56:07.000+00:00"
            projectId: "projectId"
            commands:
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
          provenanceBytes: "provenanceBytes"
        spdxPackage:
          sourceInfo: "sourceInfo"
          filename: "filename"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          comment: "comment"
          id: "id"
          title: "title"
          packageType: "packageType"
          version: "version"
          homePage: "homePage"
          summaryDescription: "summaryDescription"
        installation:
          installation:
            license:
              expression: "expression"
              comments: "comments"
            name: "name"
            location:
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            architecture: {}
        name: "name"
        sbom:
          creatorComment: "creatorComment"
          documentComment: "documentComment"
          licenseListVersion: "licenseListVersion"
          createTime: "2000-01-23T04:56:07.000+00:00"
          creators:
          - "creators"
          - "creators"
          namespace: "namespace"
          id: "id"
          externalDocumentRefs:
          - "externalDocumentRefs"
          - "externalDocumentRefs"
          title: "title"
        derivedImage:
          derivedImage:
            distance: 6
            fingerprint:
              v1Name: "v1Name"
              v2Blob:
              - "v2Blob"
              - "v2Blob"
              v2Name: "v2Name"
            baseResourceUrl: "baseResourceUrl"
            layerInfo:
            - arguments: "arguments"
              directive: {}
            - arguments: "arguments"
              directive: {}
        deployment:
          deployment:
            address: "address"
            undeployTime: "2000-01-23T04:56:07.000+00:00"
            userEmail: "userEmail"
            deployTime: "2000-01-23T04:56:07.000+00:00"
            resourceUri:
            - "resourceUri"
            - "resourceUri"
            config: "config"
            platform: {}
      nextPageToken: "nextPageToken"
  v1beta1ListNotesResponse:
    type: "object"
    properties:
      notes:
        type: "array"
        description: "The notes requested."
        items:
          $ref: "#/definitions/v1beta1Note"
      nextPageToken:
        type: "string"
        description: "The next pagination token in the list response. It should be\
          \ used as\n`page_token` for the following request. An empty value means\
          \ no more\nresults."
    description: "Response for listing notes."
    example:
      notes:
      - longDescription: "longDescription"
        package:
          license:
            expression: "expression"
            comments: "comments"
          name: "name"
          digest:
          - digestBytes: "digestBytes"
            algo: "algo"
          - digestBytes: "digestBytes"
            algo: "algo"
          description: "description"
          distribution:
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          packageType: "packageType"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          maintainer: "maintainer"
          url: "url"
        kind: {}
        vulnerabilityAssessment:
          longDescription: "longDescription"
          assessment:
            longDescription: "longDescription"
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            shortDescription: "shortDescription"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
          product:
            genericUri: "genericUri"
            name: "name"
            id: "id"
          publisher:
            issuingAuthority: "issuingAuthority"
            name: "name"
            context: "context"
          shortDescription: "shortDescription"
          title: "title"
          languageCode: "languageCode"
        baseImage:
          resourceUrl: "resourceUrl"
          fingerprint:
            v1Name: "v1Name"
            v2Blob:
            - "v2Blob"
            - "v2Blob"
            v2Name: "v2Name"
        attestationAuthority:
          hint:
            humanReadableName: "humanReadableName"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          expectedMaterials:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          signingKeys:
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          expectedProducts:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          stepName: "stepName"
          threshold: "threshold"
          expectedCommand:
          - "expectedCommand"
          - "expectedCommand"
        shortDescription: "shortDescription"
        vulnerability:
          severity: {}
          cwe:
          - "cwe"
          - "cwe"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          cvssVersion: {}
          details:
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          windowsDetails:
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
        spdxRelationship:
          type: {}
        relatedNoteNames:
        - "relatedNoteNames"
        - "relatedNoteNames"
        spdxFile:
          checksum:
          - "checksum"
          - "checksum"
          title: "title"
          fileType: {}
        deployable:
          resourceUri:
          - "resourceUri"
          - "resourceUri"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          signature:
            signature: "signature"
            keyId: "keyId"
            publicKey: "publicKey"
            keyType: {}
          builderVersion: "builderVersion"
        expirationTime: "2000-01-23T04:56:07.000+00:00"
        discovery: {}
        spdxPackage:
          copyright: "copyright"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          analyzed: true
          externalRefs:
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          downloadLocation: "downloadLocation"
          originator: "originator"
          title: "title"
          version: "version"
          homePage: "homePage"
          packageType: "packageType"
          verificationCode: "verificationCode"
          detailedDescription: "detailedDescription"
          supplier: "supplier"
          checksum: "checksum"
          attribution: "attribution"
          licenseDeclared:
            expression: "expression"
            comments: "comments"
          summaryDescription: "summaryDescription"
        name: "name"
        sbom:
          dataLicence: "dataLicence"
          spdxVersion: "spdxVersion"
        relatedUrl:
        - label: "label"
          url: "url"
        - label: "label"
          url: "url"
      - longDescription: "longDescription"
        package:
          license:
            expression: "expression"
            comments: "comments"
          name: "name"
          digest:
          - digestBytes: "digestBytes"
            algo: "algo"
          - digestBytes: "digestBytes"
            algo: "algo"
          description: "description"
          distribution:
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          - latestVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            description: "description"
            cpeUri: "cpeUri"
            maintainer: "maintainer"
            url: "url"
            architecture: {}
          packageType: "packageType"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          maintainer: "maintainer"
          url: "url"
        kind: {}
        vulnerabilityAssessment:
          longDescription: "longDescription"
          assessment:
            longDescription: "longDescription"
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            shortDescription: "shortDescription"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
          product:
            genericUri: "genericUri"
            name: "name"
            id: "id"
          publisher:
            issuingAuthority: "issuingAuthority"
            name: "name"
            context: "context"
          shortDescription: "shortDescription"
          title: "title"
          languageCode: "languageCode"
        baseImage:
          resourceUrl: "resourceUrl"
          fingerprint:
            v1Name: "v1Name"
            v2Blob:
            - "v2Blob"
            - "v2Blob"
            v2Name: "v2Name"
        attestationAuthority:
          hint:
            humanReadableName: "humanReadableName"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          expectedMaterials:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          signingKeys:
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          - publicKeyValue: "publicKeyValue"
            keyId: "keyId"
            keyType: "keyType"
            keyScheme: "keyScheme"
          expectedProducts:
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          - artifactRule:
            - "artifactRule"
            - "artifactRule"
          stepName: "stepName"
          threshold: "threshold"
          expectedCommand:
          - "expectedCommand"
          - "expectedCommand"
        shortDescription: "shortDescription"
        vulnerability:
          severity: {}
          cwe:
          - "cwe"
          - "cwe"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          cvssVersion: {}
          details:
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - package: "package"
            minAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            maxAffectedVersion:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            vendor: "vendor"
            description: "description"
            sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
            isObsolete: true
            source: "source"
            cpeUri: "cpeUri"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          windowsDetails:
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
          - name: "name"
            description: "description"
            fixingKbs:
            - name: "name"
              url: "url"
            - name: "name"
              url: "url"
            cpeUri: "cpeUri"
        spdxRelationship:
          type: {}
        relatedNoteNames:
        - "relatedNoteNames"
        - "relatedNoteNames"
        spdxFile:
          checksum:
          - "checksum"
          - "checksum"
          title: "title"
          fileType: {}
        deployable:
          resourceUri:
          - "resourceUri"
          - "resourceUri"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          signature:
            signature: "signature"
            keyId: "keyId"
            publicKey: "publicKey"
            keyType: {}
          builderVersion: "builderVersion"
        expirationTime: "2000-01-23T04:56:07.000+00:00"
        discovery: {}
        spdxPackage:
          copyright: "copyright"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          analyzed: true
          externalRefs:
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          - comment: "comment"
            category: {}
            type: "type"
            locator: "locator"
          downloadLocation: "downloadLocation"
          originator: "originator"
          title: "title"
          version: "version"
          homePage: "homePage"
          packageType: "packageType"
          verificationCode: "verificationCode"
          detailedDescription: "detailedDescription"
          supplier: "supplier"
          checksum: "checksum"
          attribution: "attribution"
          licenseDeclared:
            expression: "expression"
            comments: "comments"
          summaryDescription: "summaryDescription"
        name: "name"
        sbom:
          dataLicence: "dataLicence"
          spdxVersion: "spdxVersion"
        relatedUrl:
        - label: "label"
          url: "url"
        - label: "label"
          url: "url"
      nextPageToken: "nextPageToken"
  v1beta1ListOccurrencesResponse:
    type: "object"
    properties:
      occurrences:
        type: "array"
        description: "The occurrences requested."
        items:
          $ref: "#/definitions/v1beta1Occurrence"
      nextPageToken:
        type: "string"
        description: "The next pagination token in the list response. It should be\
          \ used as\n`page_token` for the following request. An empty value means\
          \ no more\nresults."
    description: "Response for listing occurrences."
    example:
      occurrences:
      - discovered:
          discovered:
            analysisCompleted:
              analysisType:
              - "analysisType"
              - "analysisType"
            analysisError:
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            analysisStatusError:
              code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            continuousAnalysis: {}
            lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
            analysisStatus: {}
        attestation:
          attestation:
            genericSignedAttestation:
              serializedPayload: "serializedPayload"
              contentType: {}
              signatures:
              - signature: "signature"
                publicKeyId: "publicKeyId"
              - signature: "signature"
                publicKeyId: "publicKeyId"
            pgpSignedAttestation:
              signature: "signature"
              pgpKeyId: "pgpKeyId"
              contentType: {}
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        noteName: "noteName"
        kind: {}
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          signed:
            environment:
              customValues:
                key: "customValues"
            materials:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            byproducts:
              customValues:
                key: "customValues"
            command:
            - "command"
            - "command"
            products:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        vulnerability:
          severity: {}
          longDescription: "longDescription"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          relatedUrls:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          cvssVersion: {}
          packageIssue:
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          shortDescription: "shortDescription"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          type: "type"
          vexAssessment:
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            noteName: "noteName"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
        spdxRelationship:
          comment: "comment"
          source: "source"
          type: {}
          target: "target"
        spdxFile:
          copyright: "copyright"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          comment: "comment"
          id: "id"
          contributors:
          - "contributors"
          - "contributors"
          attributions:
          - "attributions"
          - "attributions"
          notice: "notice"
        remediation: "remediation"
        envelope:
          payloadType: "payloadType"
          payload: "payload"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          provenance:
            creator: "creator"
            triggerId: "triggerId"
            buildOptions:
              key: "buildOptions"
            sourceProvenance:
              additionalContexts:
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              artifactStorageSourceUri: "artifactStorageSourceUri"
              context:
                git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              fileHashes:
                key:
                  fileHash:
                  - type: {}
                    value: "value"
                  - type: {}
                    value: "value"
            createTime: "2000-01-23T04:56:07.000+00:00"
            logsUri: "logsUri"
            builderVersion: "builderVersion"
            builtArtifacts:
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            startTime: "2000-01-23T04:56:07.000+00:00"
            id: "id"
            endTime: "2000-01-23T04:56:07.000+00:00"
            projectId: "projectId"
            commands:
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
          provenanceBytes: "provenanceBytes"
        spdxPackage:
          sourceInfo: "sourceInfo"
          filename: "filename"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          comment: "comment"
          id: "id"
          title: "title"
          packageType: "packageType"
          version: "version"
          homePage: "homePage"
          summaryDescription: "summaryDescription"
        installation:
          installation:
            license:
              expression: "expression"
              comments: "comments"
            name: "name"
            location:
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            architecture: {}
        name: "name"
        sbom:
          creatorComment: "creatorComment"
          documentComment: "documentComment"
          licenseListVersion: "licenseListVersion"
          createTime: "2000-01-23T04:56:07.000+00:00"
          creators:
          - "creators"
          - "creators"
          namespace: "namespace"
          id: "id"
          externalDocumentRefs:
          - "externalDocumentRefs"
          - "externalDocumentRefs"
          title: "title"
        derivedImage:
          derivedImage:
            distance: 6
            fingerprint:
              v1Name: "v1Name"
              v2Blob:
              - "v2Blob"
              - "v2Blob"
              v2Name: "v2Name"
            baseResourceUrl: "baseResourceUrl"
            layerInfo:
            - arguments: "arguments"
              directive: {}
            - arguments: "arguments"
              directive: {}
        deployment:
          deployment:
            address: "address"
            undeployTime: "2000-01-23T04:56:07.000+00:00"
            userEmail: "userEmail"
            deployTime: "2000-01-23T04:56:07.000+00:00"
            resourceUri:
            - "resourceUri"
            - "resourceUri"
            config: "config"
            platform: {}
      - discovered:
          discovered:
            analysisCompleted:
              analysisType:
              - "analysisType"
              - "analysisType"
            analysisError:
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            - code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            analysisStatusError:
              code: 1
              details:
              - '@type': "@type"
              - '@type': "@type"
              message: "message"
            continuousAnalysis: {}
            lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
            analysisStatus: {}
        attestation:
          attestation:
            genericSignedAttestation:
              serializedPayload: "serializedPayload"
              contentType: {}
              signatures:
              - signature: "signature"
                publicKeyId: "publicKeyId"
              - signature: "signature"
                publicKeyId: "publicKeyId"
            pgpSignedAttestation:
              signature: "signature"
              pgpKeyId: "pgpKeyId"
              contentType: {}
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        noteName: "noteName"
        kind: {}
        updateTime: "2000-01-23T04:56:07.000+00:00"
        intoto:
          signed:
            environment:
              customValues:
                key: "customValues"
            materials:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            byproducts:
              customValues:
                key: "customValues"
            command:
            - "command"
            - "command"
            products:
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
            - hashes:
                sha256: "sha256"
              resourceUri: "resourceUri"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        vulnerability:
          severity: {}
          longDescription: "longDescription"
          cvssScore: 0.8008282
          cvssV3:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          relatedUrls:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          cvssVersion: {}
          packageIssue:
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          - affectedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            fixedLocation:
              package: "package"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            severityName: "severityName"
          shortDescription: "shortDescription"
          cvssV2:
            exploitabilityScore: 5.962134
            confidentialityImpact: {}
            attackComplexity: {}
            scope: {}
            attackVector: {}
            baseScore: 1.4658129
            privilegesRequired: {}
            impactScore: 5.637377
            userInteraction: {}
            authentication: {}
          type: "type"
          vexAssessment:
            cve: "cve"
            relatedUris:
            - label: "label"
              url: "url"
            - label: "label"
              url: "url"
            noteName: "noteName"
            remediations:
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            - remediationType: {}
              remediationUri:
                label: "label"
                url: "url"
              details: "details"
              remediationTime: "2000-01-23T04:56:07.000+00:00"
            state: {}
            impacts:
            - "impacts"
            - "impacts"
            justification:
              justificationType: {}
              details: "details"
        spdxRelationship:
          comment: "comment"
          source: "source"
          type: {}
          target: "target"
        spdxFile:
          copyright: "copyright"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          filesLicenseInfo:
          - "filesLicenseInfo"
          - "filesLicenseInfo"
          comment: "comment"
          id: "id"
          contributors:
          - "contributors"
          - "contributors"
          attributions:
          - "attributions"
          - "attributions"
          notice: "notice"
        remediation: "remediation"
        envelope:
          payloadType: "payloadType"
          payload: "payload"
          signatures:
          - sig: "sig"
            keyid: "keyid"
          - sig: "sig"
            keyid: "keyid"
        createTime: "2000-01-23T04:56:07.000+00:00"
        build:
          provenance:
            creator: "creator"
            triggerId: "triggerId"
            buildOptions:
              key: "buildOptions"
            sourceProvenance:
              additionalContexts:
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              - git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              artifactStorageSourceUri: "artifactStorageSourceUri"
              context:
                git:
                  revisionId: "revisionId"
                  url: "url"
                gerrit:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  hostUri: "hostUri"
                  gerritProject: "gerritProject"
                cloudRepo:
                  revisionId: "revisionId"
                  aliasContext:
                    kind: {}
                    name: "name"
                  repoId:
                    uid: "uid"
                    projectRepoId:
                      repoName: "repoName"
                      projectId: "projectId"
                labels:
                  key: "labels"
              fileHashes:
                key:
                  fileHash:
                  - type: {}
                    value: "value"
                  - type: {}
                    value: "value"
            createTime: "2000-01-23T04:56:07.000+00:00"
            logsUri: "logsUri"
            builderVersion: "builderVersion"
            builtArtifacts:
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            - names:
              - "names"
              - "names"
              checksum: "checksum"
              id: "id"
            startTime: "2000-01-23T04:56:07.000+00:00"
            id: "id"
            endTime: "2000-01-23T04:56:07.000+00:00"
            projectId: "projectId"
            commands:
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
            - args:
              - "args"
              - "args"
              name: "name"
              id: "id"
              env:
              - "env"
              - "env"
              dir: "dir"
              waitFor:
              - "waitFor"
              - "waitFor"
          provenanceBytes: "provenanceBytes"
        spdxPackage:
          sourceInfo: "sourceInfo"
          filename: "filename"
          licenseConcluded:
            expression: "expression"
            comments: "comments"
          comment: "comment"
          id: "id"
          title: "title"
          packageType: "packageType"
          version: "version"
          homePage: "homePage"
          summaryDescription: "summaryDescription"
        installation:
          installation:
            license:
              expression: "expression"
              comments: "comments"
            name: "name"
            location:
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            - path: "path"
              cpeUri: "cpeUri"
              version:
                inclusive: true
                kind: {}
                name: "name"
                epoch: 6
                revision: "revision"
            packageType: "packageType"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
            architecture: {}
        name: "name"
        sbom:
          creatorComment: "creatorComment"
          documentComment: "documentComment"
          licenseListVersion: "licenseListVersion"
          createTime: "2000-01-23T04:56:07.000+00:00"
          creators:
          - "creators"
          - "creators"
          namespace: "namespace"
          id: "id"
          externalDocumentRefs:
          - "externalDocumentRefs"
          - "externalDocumentRefs"
          title: "title"
        derivedImage:
          derivedImage:
            distance: 6
            fingerprint:
              v1Name: "v1Name"
              v2Blob:
              - "v2Blob"
              - "v2Blob"
              v2Name: "v2Name"
            baseResourceUrl: "baseResourceUrl"
            layerInfo:
            - arguments: "arguments"
              directive: {}
            - arguments: "arguments"
              directive: {}
        deployment:
          deployment:
            address: "address"
            undeployTime: "2000-01-23T04:56:07.000+00:00"
            userEmail: "userEmail"
            deployTime: "2000-01-23T04:56:07.000+00:00"
            resourceUri:
            - "resourceUri"
            - "resourceUri"
            config: "config"
            platform: {}
      nextPageToken: "nextPageToken"
  v1beta1Note:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Output only. The name of the note in the form of\n`projects/[PROVIDER_ID]/notes/[NOTE_ID]`."
        readOnly: true
      shortDescription:
        type: "string"
        description: "A one sentence description of this note."
      longDescription:
        type: "string"
        description: "A detailed description of this note."
      kind:
        description: "Output only. The type of analysis. This field can be used as\
          \ a filter in\nlist requests."
        readOnly: true
        $ref: "#/definitions/v1beta1NoteKind"
      relatedUrl:
        type: "array"
        description: "URLs associated with this note."
        items:
          $ref: "#/definitions/v1beta1RelatedUrl"
      expirationTime:
        type: "string"
        format: "date-time"
        description: "Time of expiration for this note. Empty if note does not expire."
      createTime:
        type: "string"
        format: "date-time"
        description: "Output only. The time this note was created. This field can\
          \ be used as a\nfilter in list requests."
        readOnly: true
      updateTime:
        type: "string"
        format: "date-time"
        description: "Output only. The time this note was last updated. This field\
          \ can be used as\na filter in list requests."
        readOnly: true
      relatedNoteNames:
        type: "array"
        description: "Other notes related to this note."
        items:
          type: "string"
      vulnerability:
        description: "A note describing a package vulnerability."
        $ref: "#/definitions/vulnerabilityVulnerability"
      build:
        description: "A note describing build provenance for a verifiable build."
        $ref: "#/definitions/buildBuild"
      baseImage:
        description: "A note describing a base image."
        $ref: "#/definitions/imageBasis"
      package:
        description: "A note describing a package hosted by various package managers."
        $ref: "#/definitions/packagePackage"
      deployable:
        description: "A note describing something that can be deployed."
        $ref: "#/definitions/deploymentDeployable"
      discovery:
        description: "A note describing the initial analysis of a resource."
        $ref: "#/definitions/discoveryDiscovery"
      attestationAuthority:
        description: "A note describing an attestation role."
        $ref: "#/definitions/attestationAuthority"
      intoto:
        description: "A note describing an in-toto link."
        $ref: "#/definitions/intotoInToto"
      sbom:
        description: "A note describing a software bill of materials."
        $ref: "#/definitions/spdxDocumentNote"
      spdxPackage:
        description: "A note describing an SPDX Package."
        $ref: "#/definitions/spdxPackageInfoNote"
      spdxFile:
        description: "A note describing an SPDX File."
        $ref: "#/definitions/spdxFileNote"
      spdxRelationship:
        description: "A note describing an SPDX File."
        $ref: "#/definitions/spdxRelationshipNote"
      vulnerabilityAssessment:
        description: "A note describing a vulnerability assessment."
        $ref: "#/definitions/vexVulnerabilityAssessmentNote"
    description: "A type of analysis that can be done for a resource."
    example:
      longDescription: "longDescription"
      package:
        license:
          expression: "expression"
          comments: "comments"
        name: "name"
        digest:
        - digestBytes: "digestBytes"
          algo: "algo"
        - digestBytes: "digestBytes"
          algo: "algo"
        description: "description"
        distribution:
        - latestVersion:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          description: "description"
          cpeUri: "cpeUri"
          maintainer: "maintainer"
          url: "url"
          architecture: {}
        - latestVersion:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          description: "description"
          cpeUri: "cpeUri"
          maintainer: "maintainer"
          url: "url"
          architecture: {}
        packageType: "packageType"
        cpeUri: "cpeUri"
        version:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        maintainer: "maintainer"
        url: "url"
      kind: {}
      vulnerabilityAssessment:
        longDescription: "longDescription"
        assessment:
          longDescription: "longDescription"
          cve: "cve"
          relatedUris:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          remediations:
          - remediationType: {}
            remediationUri:
              label: "label"
              url: "url"
            details: "details"
            remediationTime: "2000-01-23T04:56:07.000+00:00"
          - remediationType: {}
            remediationUri:
              label: "label"
              url: "url"
            details: "details"
            remediationTime: "2000-01-23T04:56:07.000+00:00"
          shortDescription: "shortDescription"
          state: {}
          impacts:
          - "impacts"
          - "impacts"
          justification:
            justificationType: {}
            details: "details"
        product:
          genericUri: "genericUri"
          name: "name"
          id: "id"
        publisher:
          issuingAuthority: "issuingAuthority"
          name: "name"
          context: "context"
        shortDescription: "shortDescription"
        title: "title"
        languageCode: "languageCode"
      baseImage:
        resourceUrl: "resourceUrl"
        fingerprint:
          v1Name: "v1Name"
          v2Blob:
          - "v2Blob"
          - "v2Blob"
          v2Name: "v2Name"
      attestationAuthority:
        hint:
          humanReadableName: "humanReadableName"
      updateTime: "2000-01-23T04:56:07.000+00:00"
      intoto:
        expectedMaterials:
        - artifactRule:
          - "artifactRule"
          - "artifactRule"
        - artifactRule:
          - "artifactRule"
          - "artifactRule"
        signingKeys:
        - publicKeyValue: "publicKeyValue"
          keyId: "keyId"
          keyType: "keyType"
          keyScheme: "keyScheme"
        - publicKeyValue: "publicKeyValue"
          keyId: "keyId"
          keyType: "keyType"
          keyScheme: "keyScheme"
        expectedProducts:
        - artifactRule:
          - "artifactRule"
          - "artifactRule"
        - artifactRule:
          - "artifactRule"
          - "artifactRule"
        stepName: "stepName"
        threshold: "threshold"
        expectedCommand:
        - "expectedCommand"
        - "expectedCommand"
      shortDescription: "shortDescription"
      vulnerability:
        severity: {}
        cwe:
        - "cwe"
        - "cwe"
        cvssScore: 0.8008282
        cvssV3:
          exploitabilityScore: 5.962134
          confidentialityImpact: {}
          attackComplexity: {}
          scope: {}
          attackVector: {}
          baseScore: 1.4658129
          privilegesRequired: {}
          impactScore: 5.637377
          userInteraction: {}
          authentication: {}
        cvssVersion: {}
        details:
        - package: "package"
          minAffectedVersion:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          maxAffectedVersion:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          vendor: "vendor"
          description: "description"
          sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
          isObsolete: true
          source: "source"
          cpeUri: "cpeUri"
          fixedLocation:
            package: "package"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          packageType: "packageType"
          severityName: "severityName"
        - package: "package"
          minAffectedVersion:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          maxAffectedVersion:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          vendor: "vendor"
          description: "description"
          sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
          isObsolete: true
          source: "source"
          cpeUri: "cpeUri"
          fixedLocation:
            package: "package"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          packageType: "packageType"
          severityName: "severityName"
        sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
        cvssV2:
          exploitabilityScore: 5.962134
          confidentialityImpact: {}
          attackComplexity: {}
          scope: {}
          attackVector: {}
          baseScore: 1.4658129
          privilegesRequired: {}
          impactScore: 5.637377
          userInteraction: {}
          authentication: {}
        windowsDetails:
        - name: "name"
          description: "description"
          fixingKbs:
          - name: "name"
            url: "url"
          - name: "name"
            url: "url"
          cpeUri: "cpeUri"
        - name: "name"
          description: "description"
          fixingKbs:
          - name: "name"
            url: "url"
          - name: "name"
            url: "url"
          cpeUri: "cpeUri"
      spdxRelationship:
        type: {}
      relatedNoteNames:
      - "relatedNoteNames"
      - "relatedNoteNames"
      spdxFile:
        checksum:
        - "checksum"
        - "checksum"
        title: "title"
        fileType: {}
      deployable:
        resourceUri:
        - "resourceUri"
        - "resourceUri"
      createTime: "2000-01-23T04:56:07.000+00:00"
      build:
        signature:
          signature: "signature"
          keyId: "keyId"
          publicKey: "publicKey"
          keyType: {}
        builderVersion: "builderVersion"
      expirationTime: "2000-01-23T04:56:07.000+00:00"
      discovery: {}
      spdxPackage:
        copyright: "copyright"
        filesLicenseInfo:
        - "filesLicenseInfo"
        - "filesLicenseInfo"
        analyzed: true
        externalRefs:
        - comment: "comment"
          category: {}
          type: "type"
          locator: "locator"
        - comment: "comment"
          category: {}
          type: "type"
          locator: "locator"
        downloadLocation: "downloadLocation"
        originator: "originator"
        title: "title"
        version: "version"
        homePage: "homePage"
        packageType: "packageType"
        verificationCode: "verificationCode"
        detailedDescription: "detailedDescription"
        supplier: "supplier"
        checksum: "checksum"
        attribution: "attribution"
        licenseDeclared:
          expression: "expression"
          comments: "comments"
        summaryDescription: "summaryDescription"
      name: "name"
      sbom:
        dataLicence: "dataLicence"
        spdxVersion: "spdxVersion"
      relatedUrl:
      - label: "label"
        url: "url"
      - label: "label"
        url: "url"
  v1beta1NoteKind:
    type: "string"
    description: "Kind represents the kinds of notes supported.\n\n - NOTE_KIND_UNSPECIFIED:\
      \ Default value. This value is unused.\n - VULNERABILITY: The note and occurrence\
      \ represent a package vulnerability.\n - BUILD: The note and occurrence assert\
      \ build provenance.\n - IMAGE: This represents an image basis relationship.\n\
      \ - PACKAGE: This represents a package installed via a package manager.\n -\
      \ DEPLOYMENT: The note and occurrence track deployment events.\n - DISCOVERY:\
      \ The note and occurrence track the initial discovery status of a resource.\n\
      \ - ATTESTATION: This represents a logical \"role\" that can attest to artifacts.\n\
      \ - INTOTO: This represents an in-toto link.\n - SBOM: This represents a software\
      \ bill of materials.\n - SPDX_PACKAGE: This represents an SPDX Package.\n -\
      \ SPDX_FILE: This represents an SPDX File.\n - SPDX_RELATIONSHIP: This represents\
      \ an SPDX Relationship.\n - VULNERABILITY_ASSESSMENT: This represents a Vulnerability\
      \ Assessment."
    enum:
    - "NOTE_KIND_UNSPECIFIED"
    - "VULNERABILITY"
    - "BUILD"
    - "IMAGE"
    - "PACKAGE"
    - "DEPLOYMENT"
    - "DISCOVERY"
    - "ATTESTATION"
    - "INTOTO"
    - "SBOM"
    - "SPDX_PACKAGE"
    - "SPDX_FILE"
    - "SPDX_RELATIONSHIP"
    - "VULNERABILITY_ASSESSMENT"
    default: "NOTE_KIND_UNSPECIFIED"
  v1beta1Occurrence:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Output only. The name of the occurrence in the form of\n`projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
        readOnly: true
      resource:
        description: "Required. Immutable. The resource for which the occurrence applies."
        $ref: "#/definitions/v1beta1Resource"
      noteName:
        type: "string"
        description: "Required. Immutable. The analysis note associated with this\
          \ occurrence, in\nthe form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.\
          \ This field can be\nused as a filter in list requests."
      kind:
        description: "Output only. This explicitly denotes which of the occurrence\
          \ details are\nspecified. This field can be used as a filter in list requests."
        readOnly: true
        $ref: "#/definitions/v1beta1NoteKind"
      remediation:
        type: "string"
        description: "A description of actions that can be taken to remedy the note."
      createTime:
        type: "string"
        format: "date-time"
        description: "Output only. The time this occurrence was created."
        readOnly: true
      updateTime:
        type: "string"
        format: "date-time"
        description: "Output only. The time this occurrence was last updated."
        readOnly: true
      vulnerability:
        description: "Describes a security vulnerability."
        $ref: "#/definitions/v1beta1vulnerabilityDetails"
      build:
        description: "Describes a verifiable build."
        $ref: "#/definitions/v1beta1buildDetails"
      derivedImage:
        description: "Describes how this resource derives from the basis in the associated\n\
          note."
        $ref: "#/definitions/v1beta1imageDetails"
      installation:
        description: "Describes the installation of a package on the linked resource."
        $ref: "#/definitions/v1beta1packageDetails"
      deployment:
        description: "Describes the deployment of an artifact on a runtime."
        $ref: "#/definitions/v1beta1deploymentDetails"
      discovered:
        description: "Describes when a resource was discovered."
        $ref: "#/definitions/v1beta1discoveryDetails"
      attestation:
        description: "Describes an attestation of an artifact."
        $ref: "#/definitions/v1beta1attestationDetails"
      intoto:
        description: "Describes a specific in-toto link."
        $ref: "#/definitions/v1beta1intotoDetails"
      sbom:
        description: "Describes a specific software bill of materials document."
        $ref: "#/definitions/spdxDocumentOccurrence"
      spdxPackage:
        description: "Describes a specific SPDX Package."
        $ref: "#/definitions/spdxPackageInfoOccurrence"
      spdxFile:
        description: "Describes a specific SPDX File."
        $ref: "#/definitions/spdxFileOccurrence"
      spdxRelationship:
        description: "Describes a specific SPDX Relationship."
        $ref: "#/definitions/spdxRelationshipOccurrence"
      envelope:
        title: "https://github.com/secure-systems-lab/dsse"
        $ref: "#/definitions/v1beta1Envelope"
    description: "An instance of an analysis type that has been found on a resource."
    example:
      discovered:
        discovered:
          analysisCompleted:
            analysisType:
            - "analysisType"
            - "analysisType"
          analysisError:
          - code: 1
            details:
            - '@type': "@type"
            - '@type': "@type"
            message: "message"
          - code: 1
            details:
            - '@type': "@type"
            - '@type': "@type"
            message: "message"
          analysisStatusError:
            code: 1
            details:
            - '@type': "@type"
            - '@type': "@type"
            message: "message"
          continuousAnalysis: {}
          lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
          analysisStatus: {}
      attestation:
        attestation:
          genericSignedAttestation:
            serializedPayload: "serializedPayload"
            contentType: {}
            signatures:
            - signature: "signature"
              publicKeyId: "publicKeyId"
            - signature: "signature"
              publicKeyId: "publicKeyId"
          pgpSignedAttestation:
            signature: "signature"
            pgpKeyId: "pgpKeyId"
            contentType: {}
      resource:
        name: "name"
        uri: "uri"
        contentHash:
          type: {}
          value: "value"
      noteName: "noteName"
      kind: {}
      updateTime: "2000-01-23T04:56:07.000+00:00"
      intoto:
        signed:
          environment:
            customValues:
              key: "customValues"
          materials:
          - hashes:
              sha256: "sha256"
            resourceUri: "resourceUri"
          - hashes:
              sha256: "sha256"
            resourceUri: "resourceUri"
          byproducts:
            customValues:
              key: "customValues"
          command:
          - "command"
          - "command"
          products:
          - hashes:
              sha256: "sha256"
            resourceUri: "resourceUri"
          - hashes:
              sha256: "sha256"
            resourceUri: "resourceUri"
        signatures:
        - sig: "sig"
          keyid: "keyid"
        - sig: "sig"
          keyid: "keyid"
      vulnerability:
        severity: {}
        longDescription: "longDescription"
        cvssScore: 0.8008282
        cvssV3:
          exploitabilityScore: 5.962134
          confidentialityImpact: {}
          attackComplexity: {}
          scope: {}
          attackVector: {}
          baseScore: 1.4658129
          privilegesRequired: {}
          impactScore: 5.637377
          userInteraction: {}
          authentication: {}
        relatedUrls:
        - label: "label"
          url: "url"
        - label: "label"
          url: "url"
        cvssVersion: {}
        packageIssue:
        - affectedLocation:
            package: "package"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          fixedLocation:
            package: "package"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          packageType: "packageType"
          severityName: "severityName"
        - affectedLocation:
            package: "package"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          fixedLocation:
            package: "package"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          packageType: "packageType"
          severityName: "severityName"
        shortDescription: "shortDescription"
        cvssV2:
          exploitabilityScore: 5.962134
          confidentialityImpact: {}
          attackComplexity: {}
          scope: {}
          attackVector: {}
          baseScore: 1.4658129
          privilegesRequired: {}
          impactScore: 5.637377
          userInteraction: {}
          authentication: {}
        type: "type"
        vexAssessment:
          cve: "cve"
          relatedUris:
          - label: "label"
            url: "url"
          - label: "label"
            url: "url"
          noteName: "noteName"
          remediations:
          - remediationType: {}
            remediationUri:
              label: "label"
              url: "url"
            details: "details"
            remediationTime: "2000-01-23T04:56:07.000+00:00"
          - remediationType: {}
            remediationUri:
              label: "label"
              url: "url"
            details: "details"
            remediationTime: "2000-01-23T04:56:07.000+00:00"
          state: {}
          impacts:
          - "impacts"
          - "impacts"
          justification:
            justificationType: {}
            details: "details"
      spdxRelationship:
        comment: "comment"
        source: "source"
        type: {}
        target: "target"
      spdxFile:
        copyright: "copyright"
        licenseConcluded:
          expression: "expression"
          comments: "comments"
        filesLicenseInfo:
        - "filesLicenseInfo"
        - "filesLicenseInfo"
        comment: "comment"
        id: "id"
        contributors:
        - "contributors"
        - "contributors"
        attributions:
        - "attributions"
        - "attributions"
        notice: "notice"
      remediation: "remediation"
      envelope:
        payloadType: "payloadType"
        payload: "payload"
        signatures:
        - sig: "sig"
          keyid: "keyid"
        - sig: "sig"
          keyid: "keyid"
      createTime: "2000-01-23T04:56:07.000+00:00"
      build:
        provenance:
          creator: "creator"
          triggerId: "triggerId"
          buildOptions:
            key: "buildOptions"
          sourceProvenance:
            additionalContexts:
            - git:
                revisionId: "revisionId"
                url: "url"
              gerrit:
                revisionId: "revisionId"
                aliasContext:
                  kind: {}
                  name: "name"
                hostUri: "hostUri"
                gerritProject: "gerritProject"
              cloudRepo:
                revisionId: "revisionId"
                aliasContext:
                  kind: {}
                  name: "name"
                repoId:
                  uid: "uid"
                  projectRepoId:
                    repoName: "repoName"
                    projectId: "projectId"
              labels:
                key: "labels"
            - git:
                revisionId: "revisionId"
                url: "url"
              gerrit:
                revisionId: "revisionId"
                aliasContext:
                  kind: {}
                  name: "name"
                hostUri: "hostUri"
                gerritProject: "gerritProject"
              cloudRepo:
                revisionId: "revisionId"
                aliasContext:
                  kind: {}
                  name: "name"
                repoId:
                  uid: "uid"
                  projectRepoId:
                    repoName: "repoName"
                    projectId: "projectId"
              labels:
                key: "labels"
            artifactStorageSourceUri: "artifactStorageSourceUri"
            context:
              git:
                revisionId: "revisionId"
                url: "url"
              gerrit:
                revisionId: "revisionId"
                aliasContext:
                  kind: {}
                  name: "name"
                hostUri: "hostUri"
                gerritProject: "gerritProject"
              cloudRepo:
                revisionId: "revisionId"
                aliasContext:
                  kind: {}
                  name: "name"
                repoId:
                  uid: "uid"
                  projectRepoId:
                    repoName: "repoName"
                    projectId: "projectId"
              labels:
                key: "labels"
            fileHashes:
              key:
                fileHash:
                - type: {}
                  value: "value"
                - type: {}
                  value: "value"
          createTime: "2000-01-23T04:56:07.000+00:00"
          logsUri: "logsUri"
          builderVersion: "builderVersion"
          builtArtifacts:
          - names:
            - "names"
            - "names"
            checksum: "checksum"
            id: "id"
          - names:
            - "names"
            - "names"
            checksum: "checksum"
            id: "id"
          startTime: "2000-01-23T04:56:07.000+00:00"
          id: "id"
          endTime: "2000-01-23T04:56:07.000+00:00"
          projectId: "projectId"
          commands:
          - args:
            - "args"
            - "args"
            name: "name"
            id: "id"
            env:
            - "env"
            - "env"
            dir: "dir"
            waitFor:
            - "waitFor"
            - "waitFor"
          - args:
            - "args"
            - "args"
            name: "name"
            id: "id"
            env:
            - "env"
            - "env"
            dir: "dir"
            waitFor:
            - "waitFor"
            - "waitFor"
        provenanceBytes: "provenanceBytes"
      spdxPackage:
        sourceInfo: "sourceInfo"
        filename: "filename"
        licenseConcluded:
          expression: "expression"
          comments: "comments"
        comment: "comment"
        id: "id"
        title: "title"
        packageType: "packageType"
        version: "version"
        homePage: "homePage"
        summaryDescription: "summaryDescription"
      installation:
        installation:
          license:
            expression: "expression"
            comments: "comments"
          name: "name"
          location:
          - path: "path"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          - path: "path"
            cpeUri: "cpeUri"
            version:
              inclusive: true
              kind: {}
              name: "name"
              epoch: 6
              revision: "revision"
          packageType: "packageType"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
          architecture: {}
      name: "name"
      sbom:
        creatorComment: "creatorComment"
        documentComment: "documentComment"
        licenseListVersion: "licenseListVersion"
        createTime: "2000-01-23T04:56:07.000+00:00"
        creators:
        - "creators"
        - "creators"
        namespace: "namespace"
        id: "id"
        externalDocumentRefs:
        - "externalDocumentRefs"
        - "externalDocumentRefs"
        title: "title"
      derivedImage:
        derivedImage:
          distance: 6
          fingerprint:
            v1Name: "v1Name"
            v2Blob:
            - "v2Blob"
            - "v2Blob"
            v2Name: "v2Name"
          baseResourceUrl: "baseResourceUrl"
          layerInfo:
          - arguments: "arguments"
            directive: {}
          - arguments: "arguments"
            directive: {}
      deployment:
        deployment:
          address: "address"
          undeployTime: "2000-01-23T04:56:07.000+00:00"
          userEmail: "userEmail"
          deployTime: "2000-01-23T04:56:07.000+00:00"
          resourceUri:
          - "resourceUri"
          - "resourceUri"
          config: "config"
          platform: {}
  v1beta1RelatedUrl:
    type: "object"
    properties:
      url:
        type: "string"
        description: "Specific URL associated with the resource."
      label:
        type: "string"
        description: "Label to describe usage of the URL."
    description: "Metadata for any related URL information."
    example:
      label: "label"
      url: "url"
  v1beta1Resource:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Deprecated, do not use. Use uri instead.\n\nThe name of the\
          \ resource. For example, the name of a Docker image -\n\"Debian\"."
      uri:
        type: "string"
        description: "Required. The unique URI of the resource. For example,\n`https://gcr.io/project/image@sha256:foo`\
          \ for a Docker image."
      contentHash:
        description: "Deprecated, do not use. Use uri instead.\n\nThe hash of the\
          \ resource content. For example, the Docker digest."
        $ref: "#/definitions/provenanceHash"
    description: "An entity that can have metadata. For example, a Docker image."
    example:
      name: "name"
      uri: "uri"
      contentHash:
        type: {}
        value: "value"
  v1beta1VulnerabilityOccurrencesSummary:
    type: "object"
    properties:
      counts:
        type: "array"
        description: "A listing by resource of the number of fixable and total vulnerabilities."
        items:
          $ref: "#/definitions/VulnerabilityOccurrencesSummaryFixableTotalByDigest"
    description: "A summary of how many vulnerability occurrences there are per resource\
      \ and\nseverity type."
    example:
      counts:
      - severity: {}
        fixableCount: "fixableCount"
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        totalCount: "totalCount"
      - severity: {}
        fixableCount: "fixableCount"
        resource:
          name: "name"
          uri: "uri"
          contentHash:
            type: {}
            value: "value"
        totalCount: "totalCount"
  v1beta1attestationDetails:
    type: "object"
    properties:
      attestation:
        description: "Required. Attestation for the resource."
        $ref: "#/definitions/attestationAttestation"
    description: "Details of an attestation occurrence."
    example:
      attestation:
        genericSignedAttestation:
          serializedPayload: "serializedPayload"
          contentType: {}
          signatures:
          - signature: "signature"
            publicKeyId: "publicKeyId"
          - signature: "signature"
            publicKeyId: "publicKeyId"
        pgpSignedAttestation:
          signature: "signature"
          pgpKeyId: "pgpKeyId"
          contentType: {}
  v1beta1buildDetails:
    type: "object"
    properties:
      provenance:
        description: "Required. The actual provenance for the build."
        $ref: "#/definitions/provenanceBuildProvenance"
      provenanceBytes:
        type: "string"
        description: "Serialized JSON representation of the provenance, used in generating\
          \ the\nbuild signature in the corresponding build note. After verifying\
          \ the\nsignature, `provenance_bytes` can be unmarshalled and compared to\
          \ the\nprovenance to confirm that it is unchanged. A base64-encoded string\n\
          representation of the provenance bytes is used for the signature in order\n\
          to interoperate with openssl which expects this format for signature\nverification.\n\
          \nThe serialized form is captured both to avoid ambiguity in how the\nprovenance\
          \ is marshalled to json as well to prevent incompatibilities with\nfuture\
          \ changes."
    description: "Details of a build occurrence."
    example:
      provenance:
        creator: "creator"
        triggerId: "triggerId"
        buildOptions:
          key: "buildOptions"
        sourceProvenance:
          additionalContexts:
          - git:
              revisionId: "revisionId"
              url: "url"
            gerrit:
              revisionId: "revisionId"
              aliasContext:
                kind: {}
                name: "name"
              hostUri: "hostUri"
              gerritProject: "gerritProject"
            cloudRepo:
              revisionId: "revisionId"
              aliasContext:
                kind: {}
                name: "name"
              repoId:
                uid: "uid"
                projectRepoId:
                  repoName: "repoName"
                  projectId: "projectId"
            labels:
              key: "labels"
          - git:
              revisionId: "revisionId"
              url: "url"
            gerrit:
              revisionId: "revisionId"
              aliasContext:
                kind: {}
                name: "name"
              hostUri: "hostUri"
              gerritProject: "gerritProject"
            cloudRepo:
              revisionId: "revisionId"
              aliasContext:
                kind: {}
                name: "name"
              repoId:
                uid: "uid"
                projectRepoId:
                  repoName: "repoName"
                  projectId: "projectId"
            labels:
              key: "labels"
          artifactStorageSourceUri: "artifactStorageSourceUri"
          context:
            git:
              revisionId: "revisionId"
              url: "url"
            gerrit:
              revisionId: "revisionId"
              aliasContext:
                kind: {}
                name: "name"
              hostUri: "hostUri"
              gerritProject: "gerritProject"
            cloudRepo:
              revisionId: "revisionId"
              aliasContext:
                kind: {}
                name: "name"
              repoId:
                uid: "uid"
                projectRepoId:
                  repoName: "repoName"
                  projectId: "projectId"
            labels:
              key: "labels"
          fileHashes:
            key:
              fileHash:
              - type: {}
                value: "value"
              - type: {}
                value: "value"
        createTime: "2000-01-23T04:56:07.000+00:00"
        logsUri: "logsUri"
        builderVersion: "builderVersion"
        builtArtifacts:
        - names:
          - "names"
          - "names"
          checksum: "checksum"
          id: "id"
        - names:
          - "names"
          - "names"
          checksum: "checksum"
          id: "id"
        startTime: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        endTime: "2000-01-23T04:56:07.000+00:00"
        projectId: "projectId"
        commands:
        - args:
          - "args"
          - "args"
          name: "name"
          id: "id"
          env:
          - "env"
          - "env"
          dir: "dir"
          waitFor:
          - "waitFor"
          - "waitFor"
        - args:
          - "args"
          - "args"
          name: "name"
          id: "id"
          env:
          - "env"
          - "env"
          dir: "dir"
          waitFor:
          - "waitFor"
          - "waitFor"
      provenanceBytes: "provenanceBytes"
  v1beta1deploymentDetails:
    type: "object"
    properties:
      deployment:
        description: "Required. Deployment history for the resource."
        $ref: "#/definitions/deploymentDeployment"
    description: "Details of a deployment occurrence."
    example:
      deployment:
        address: "address"
        undeployTime: "2000-01-23T04:56:07.000+00:00"
        userEmail: "userEmail"
        deployTime: "2000-01-23T04:56:07.000+00:00"
        resourceUri:
        - "resourceUri"
        - "resourceUri"
        config: "config"
        platform: {}
  v1beta1discoveryDetails:
    type: "object"
    properties:
      discovered:
        description: "Required. Analysis status for the discovered resource."
        $ref: "#/definitions/discoveryDiscovered"
    description: "Details of a discovery occurrence."
    example:
      discovered:
        analysisCompleted:
          analysisType:
          - "analysisType"
          - "analysisType"
        analysisError:
        - code: 1
          details:
          - '@type': "@type"
          - '@type': "@type"
          message: "message"
        - code: 1
          details:
          - '@type': "@type"
          - '@type': "@type"
          message: "message"
        analysisStatusError:
          code: 1
          details:
          - '@type': "@type"
          - '@type': "@type"
          message: "message"
        continuousAnalysis: {}
        lastAnalysisTime: "2000-01-23T04:56:07.000+00:00"
        analysisStatus: {}
  v1beta1imageDetails:
    type: "object"
    properties:
      derivedImage:
        description: "Required. Immutable. The child image derived from the base image."
        $ref: "#/definitions/imageDerived"
    description: "Details of an image occurrence."
    example:
      derivedImage:
        distance: 6
        fingerprint:
          v1Name: "v1Name"
          v2Blob:
          - "v2Blob"
          - "v2Blob"
          v2Name: "v2Name"
        baseResourceUrl: "baseResourceUrl"
        layerInfo:
        - arguments: "arguments"
          directive: {}
        - arguments: "arguments"
          directive: {}
  v1beta1intotoDetails:
    type: "object"
    properties:
      signatures:
        type: "array"
        items:
          $ref: "#/definitions/v1beta1intotoSignature"
      signed:
        $ref: "#/definitions/intotoLink"
    description: "This corresponds to a signed in-toto link - it is made up of one\
      \ or more\nsignatures and the in-toto link itself. This is used for occurrences\
      \ of a\nGrafeas in-toto note."
    example:
      signed:
        environment:
          customValues:
            key: "customValues"
        materials:
        - hashes:
            sha256: "sha256"
          resourceUri: "resourceUri"
        - hashes:
            sha256: "sha256"
          resourceUri: "resourceUri"
        byproducts:
          customValues:
            key: "customValues"
        command:
        - "command"
        - "command"
        products:
        - hashes:
            sha256: "sha256"
          resourceUri: "resourceUri"
        - hashes:
            sha256: "sha256"
          resourceUri: "resourceUri"
      signatures:
      - sig: "sig"
        keyid: "keyid"
      - sig: "sig"
        keyid: "keyid"
  v1beta1intotoSignature:
    type: "object"
    properties:
      keyid:
        type: "string"
      sig:
        type: "string"
    description: "A signature object consists of the KeyID used and the signature\
      \ itself."
    example:
      sig: "sig"
      keyid: "keyid"
  v1beta1packageDetails:
    type: "object"
    properties:
      installation:
        description: "Required. Where the package was installed."
        $ref: "#/definitions/packageInstallation"
    description: "Details of a package occurrence."
    example:
      installation:
        license:
          expression: "expression"
          comments: "comments"
        name: "name"
        location:
        - path: "path"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        - path: "path"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        packageType: "packageType"
        cpeUri: "cpeUri"
        version:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        architecture: {}
  v1beta1packageLocation:
    type: "object"
    properties:
      cpeUri:
        type: "string"
        description: "Deprecated.\nThe CPE URI in [CPE format](https://cpe.mitre.org/specification/)\n\
          denoting the package manager version distributing a package."
      version:
        description: "Deprecated.\nThe version installed at this location."
        $ref: "#/definitions/packageVersion"
      path:
        type: "string"
        description: "The path from which we gathered that this package/version is\
          \ installed."
    description: "An occurrence of a particular package installation found within\
      \ a system's\nfilesystem. E.g., glibc was found in `/var/lib/dpkg/status`."
    example:
      path: "path"
      cpeUri: "cpeUri"
      version:
        inclusive: true
        kind: {}
        name: "name"
        epoch: 6
        revision: "revision"
  v1beta1provenanceArtifact:
    type: "object"
    properties:
      checksum:
        type: "string"
        description: "Hash or checksum value of a binary, or Docker Registry 2.0 digest\
          \ of a\ncontainer."
      id:
        type: "string"
        description: "Artifact ID, if any; for container images, this will be a URL\
          \ by digest\nlike `gcr.io/projectID/imagename@sha256:123456`."
      names:
        type: "array"
        description: "Related artifact names. This may be the path to a binary or\
          \ jar file, or in\nthe case of a container build, the name used to push\
          \ the container image to\nGoogle Container Registry, as presented to `docker\
          \ push`. Note that a\nsingle Artifact ID can have multiple names, for example\
          \ if two tags are\napplied to one image."
        items:
          type: "string"
    description: "Artifact describes a build product."
    example:
      names:
      - "names"
      - "names"
      checksum: "checksum"
      id: "id"
  v1beta1vulnerabilityDetails:
    type: "object"
    properties:
      type:
        type: "string"
        title: "The type of package; whether native or non native(ruby gems, node.js\n\
          packages etc)"
      severity:
        description: "Output only. The note provider assigned Severity of the vulnerability."
        readOnly: true
        $ref: "#/definitions/vulnerabilitySeverity"
      cvssScore:
        type: "number"
        format: "float"
        description: "Output only. The CVSS score of this vulnerability. CVSS score\
          \ is on a\nscale of 0-10 where 0 indicates low severity and 10 indicates\
          \ high\nseverity."
        readOnly: true
      packageIssue:
        type: "array"
        description: "Required. The set of affected locations and their fixes (if\
          \ available)\nwithin the associated resource."
        items:
          $ref: "#/definitions/vulnerabilityPackageIssue"
      shortDescription:
        type: "string"
        description: "Output only. A one sentence description of this vulnerability."
        readOnly: true
      longDescription:
        type: "string"
        description: "Output only. A detailed description of this vulnerability."
        readOnly: true
      relatedUrls:
        type: "array"
        description: "Output only. URLs related to this vulnerability."
        readOnly: true
        items:
          $ref: "#/definitions/v1beta1RelatedUrl"
      effectiveSeverity:
        description: "The distro assigned severity for this vulnerability when it\
          \ is\navailable, and note provider assigned severity when distro has not\
          \ yet\nassigned a severity for this vulnerability.\n\nWhen there are multiple\
          \ PackageIssues for this vulnerability, they can have\ndifferent effective\
          \ severities because some might be provided by the distro\nwhile others\
          \ are provided by the language ecosystem for a language pack.\nFor this\
          \ reason, it is advised to use the effective severity on the\nPackageIssue\
          \ level. In the case where multiple PackageIssues have differing\neffective\
          \ severities, this field should be the highest severity for any of\nthe\
          \ PackageIssues."
        $ref: "#/definitions/vulnerabilitySeverity"
      cvssVersion:
        description: "Output only. CVSS version used to populate cvss_score and severity."
        readOnly: true
        $ref: "#/definitions/vulnerabilityCVSSVersion"
      vexAssessment:
        $ref: "#/definitions/DetailsVexAssessment"
      cvssV2:
        description: "The cvss v2 score for the vulnerability."
        $ref: "#/definitions/vulnerabilityCVSS"
      cvssV3:
        description: "The cvss v3 score for the vulnerability."
        $ref: "#/definitions/vulnerabilityCVSS"
    description: "Details of a vulnerability Occurrence."
    example:
      severity: {}
      longDescription: "longDescription"
      cvssScore: 0.8008282
      cvssV3:
        exploitabilityScore: 5.962134
        confidentialityImpact: {}
        attackComplexity: {}
        scope: {}
        attackVector: {}
        baseScore: 1.4658129
        privilegesRequired: {}
        impactScore: 5.637377
        userInteraction: {}
        authentication: {}
      relatedUrls:
      - label: "label"
        url: "url"
      - label: "label"
        url: "url"
      cvssVersion: {}
      packageIssue:
      - affectedLocation:
          package: "package"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        fixedLocation:
          package: "package"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        packageType: "packageType"
        severityName: "severityName"
      - affectedLocation:
          package: "package"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        fixedLocation:
          package: "package"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        packageType: "packageType"
        severityName: "severityName"
      shortDescription: "shortDescription"
      cvssV2:
        exploitabilityScore: 5.962134
        confidentialityImpact: {}
        attackComplexity: {}
        scope: {}
        attackVector: {}
        baseScore: 1.4658129
        privilegesRequired: {}
        impactScore: 5.637377
        userInteraction: {}
        authentication: {}
      type: "type"
      vexAssessment:
        cve: "cve"
        relatedUris:
        - label: "label"
          url: "url"
        - label: "label"
          url: "url"
        noteName: "noteName"
        remediations:
        - remediationType: {}
          remediationUri:
            label: "label"
            url: "url"
          details: "details"
          remediationTime: "2000-01-23T04:56:07.000+00:00"
        - remediationType: {}
          remediationUri:
            label: "label"
            url: "url"
          details: "details"
          remediationTime: "2000-01-23T04:56:07.000+00:00"
        state: {}
        impacts:
        - "impacts"
        - "impacts"
        justification:
          justificationType: {}
          details: "details"
  vexVulnerabilityAssessmentNote:
    type: "object"
    properties:
      title:
        type: "string"
        title: "The title of the note. E.g. `Vex-Debian-11.4`"
      shortDescription:
        type: "string"
        description: "A one sentence description of this Vex."
      longDescription:
        type: "string"
        description: "A detailed description of this Vex."
      languageCode:
        type: "string"
        description: "Identifies the language used by this document,\ncorresponding\
          \ to IETF BCP 47 / RFC 5646."
      publisher:
        description: "Publisher details of this Note."
        $ref: "#/definitions/VulnerabilityAssessmentNotePublisher"
      product:
        description: "The product affected by this vex."
        $ref: "#/definitions/VulnerabilityAssessmentNoteProduct"
      assessment:
        description: "Represents a vulnerability assessment for the product."
        $ref: "#/definitions/VulnerabilityAssessmentNoteAssessment"
    description: "A single VulnerabilityAssessmentNote represents\none particular\
      \ product's vulnerability assessment for one CVE."
    example:
      longDescription: "longDescription"
      assessment:
        longDescription: "longDescription"
        cve: "cve"
        relatedUris:
        - label: "label"
          url: "url"
        - label: "label"
          url: "url"
        remediations:
        - remediationType: {}
          remediationUri:
            label: "label"
            url: "url"
          details: "details"
          remediationTime: "2000-01-23T04:56:07.000+00:00"
        - remediationType: {}
          remediationUri:
            label: "label"
            url: "url"
          details: "details"
          remediationTime: "2000-01-23T04:56:07.000+00:00"
        shortDescription: "shortDescription"
        state: {}
        impacts:
        - "impacts"
        - "impacts"
        justification:
          justificationType: {}
          details: "details"
      product:
        genericUri: "genericUri"
        name: "name"
        id: "id"
      publisher:
        issuingAuthority: "issuingAuthority"
        name: "name"
        context: "context"
      shortDescription: "shortDescription"
      title: "title"
      languageCode: "languageCode"
  vulnerabilityCVSS:
    type: "object"
    properties:
      baseScore:
        type: "number"
        format: "float"
        description: "The base score is a function of the base metric scores."
      exploitabilityScore:
        type: "number"
        format: "float"
      impactScore:
        type: "number"
        format: "float"
      attackVector:
        description: "Base Metrics\nRepresents the intrinsic characteristics of a\
          \ vulnerability that are\nconstant over time and across user environments."
        $ref: "#/definitions/CVSSAttackVector"
      attackComplexity:
        $ref: "#/definitions/CVSSAttackComplexity"
      authentication:
        $ref: "#/definitions/CVSSAuthentication"
      privilegesRequired:
        $ref: "#/definitions/CVSSPrivilegesRequired"
      userInteraction:
        $ref: "#/definitions/CVSSUserInteraction"
      scope:
        $ref: "#/definitions/CVSSScope"
      confidentialityImpact:
        $ref: "#/definitions/CVSSImpact"
      integrityImpact:
        $ref: "#/definitions/CVSSImpact"
      availabilityImpact:
        $ref: "#/definitions/CVSSImpact"
    title: "Common Vulnerability Scoring System.\nThis message is compatible with\
      \ CVSS v2 and v3.\nFor CVSS v2 details, see https://www.first.org/cvss/v2/guide\n\
      CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator\nFor\
      \ CVSS v3 details, see https://www.first.org/cvss/specification-document\nCVSS\
      \ v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator"
    example:
      exploitabilityScore: 5.962134
      confidentialityImpact: {}
      attackComplexity: {}
      scope: {}
      attackVector: {}
      baseScore: 1.4658129
      privilegesRequired: {}
      impactScore: 5.637377
      userInteraction: {}
      authentication: {}
  vulnerabilityCVSSVersion:
    type: "string"
    description: "CVSS Version."
    enum:
    - "CVSS_VERSION_UNSPECIFIED"
    - "CVSS_VERSION_2"
    - "CVSS_VERSION_3"
    default: "CVSS_VERSION_UNSPECIFIED"
  vulnerabilityPackageIssue:
    type: "object"
    properties:
      affectedLocation:
        description: "Required. The location of the vulnerability."
        $ref: "#/definitions/vulnerabilityVulnerabilityLocation"
      fixedLocation:
        description: "The location of the available fix for vulnerability."
        $ref: "#/definitions/vulnerabilityVulnerabilityLocation"
      severityName:
        type: "string"
        description: "Deprecated, use Details.effective_severity instead\nThe severity\
          \ (e.g., distro assigned severity) for this vulnerability."
      packageType:
        type: "string"
        description: "The type of package (e.g. OS, MAVEN, GO)."
      effectiveSeverity:
        description: "The distro or language system assigned severity for this vulnerability\n\
          when that is available and note provider assigned severity when it is not\n\
          available."
        $ref: "#/definitions/vulnerabilitySeverity"
    description: "This message wraps a location affected by a vulnerability and its\n\
      associated fix (if one is available)."
    example:
      affectedLocation:
        package: "package"
        cpeUri: "cpeUri"
        version:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
      fixedLocation:
        package: "package"
        cpeUri: "cpeUri"
        version:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
      packageType: "packageType"
      severityName: "severityName"
  vulnerabilitySeverity:
    type: "string"
    description: "Note provider-assigned severity/impact ranking.\n\n - SEVERITY_UNSPECIFIED:\
      \ Unknown.\n - MINIMAL: Minimal severity.\n - LOW: Low severity.\n - MEDIUM:\
      \ Medium severity.\n - HIGH: High severity.\n - CRITICAL: Critical severity."
    enum:
    - "SEVERITY_UNSPECIFIED"
    - "MINIMAL"
    - "LOW"
    - "MEDIUM"
    - "HIGH"
    - "CRITICAL"
    default: "SEVERITY_UNSPECIFIED"
  vulnerabilityVulnerability:
    type: "object"
    properties:
      cvssScore:
        type: "number"
        format: "float"
        description: "The CVSS score for this vulnerability."
      severity:
        description: "Note provider assigned impact of the vulnerability."
        $ref: "#/definitions/vulnerabilitySeverity"
      details:
        type: "array"
        description: "All information about the package to specifically identify this\n\
          vulnerability. One entry per (version range and cpe_uri) the package\nvulnerability\
          \ has manifested in."
        items:
          $ref: "#/definitions/VulnerabilityDetail"
      cvssV3:
        description: "The full description of the CVSS for version 3."
        $ref: "#/definitions/vulnerabilityCVSS"
      windowsDetails:
        type: "array"
        description: "Windows details get their own format because the information\
          \ format and\nmodel don't match a normal detail. Specifically Windows updates\
          \ are done as\npatches, thus Windows vulnerabilities really are a missing\
          \ package, rather\nthan a package being at an incorrect version."
        items:
          $ref: "#/definitions/VulnerabilityWindowsDetail"
      sourceUpdateTime:
        type: "string"
        format: "date-time"
        description: "The time this information was last changed at the source. This\
          \ is an\nupstream timestamp from the underlying information source - e.g.\
          \ Ubuntu\nsecurity tracker."
      cvssV2:
        description: "The full description of the CVSS for version 2."
        $ref: "#/definitions/vulnerabilityCVSS"
      cwe:
        type: "array"
        title: "A list of CWE for this vulnerability.\nFor details, see: https://cwe.mitre.org/index.html"
        items:
          type: "string"
      cvssVersion:
        description: "CVSS version used to populate cvss_score and severity."
        $ref: "#/definitions/vulnerabilityCVSSVersion"
    description: "Vulnerability provides metadata about a security vulnerability in\
      \ a Note."
    example:
      severity: {}
      cwe:
      - "cwe"
      - "cwe"
      cvssScore: 0.8008282
      cvssV3:
        exploitabilityScore: 5.962134
        confidentialityImpact: {}
        attackComplexity: {}
        scope: {}
        attackVector: {}
        baseScore: 1.4658129
        privilegesRequired: {}
        impactScore: 5.637377
        userInteraction: {}
        authentication: {}
      cvssVersion: {}
      details:
      - package: "package"
        minAffectedVersion:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        maxAffectedVersion:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        vendor: "vendor"
        description: "description"
        sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
        isObsolete: true
        source: "source"
        cpeUri: "cpeUri"
        fixedLocation:
          package: "package"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        packageType: "packageType"
        severityName: "severityName"
      - package: "package"
        minAffectedVersion:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        maxAffectedVersion:
          inclusive: true
          kind: {}
          name: "name"
          epoch: 6
          revision: "revision"
        vendor: "vendor"
        description: "description"
        sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
        isObsolete: true
        source: "source"
        cpeUri: "cpeUri"
        fixedLocation:
          package: "package"
          cpeUri: "cpeUri"
          version:
            inclusive: true
            kind: {}
            name: "name"
            epoch: 6
            revision: "revision"
        packageType: "packageType"
        severityName: "severityName"
      sourceUpdateTime: "2000-01-23T04:56:07.000+00:00"
      cvssV2:
        exploitabilityScore: 5.962134
        confidentialityImpact: {}
        attackComplexity: {}
        scope: {}
        attackVector: {}
        baseScore: 1.4658129
        privilegesRequired: {}
        impactScore: 5.637377
        userInteraction: {}
        authentication: {}
      windowsDetails:
      - name: "name"
        description: "description"
        fixingKbs:
        - name: "name"
          url: "url"
        - name: "name"
          url: "url"
        cpeUri: "cpeUri"
      - name: "name"
        description: "description"
        fixingKbs:
        - name: "name"
          url: "url"
        - name: "name"
          url: "url"
        cpeUri: "cpeUri"
  vulnerabilityVulnerabilityLocation:
    type: "object"
    properties:
      cpeUri:
        type: "string"
        description: "Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/)\n\
          format. Examples include distro or storage location for vulnerable jar."
      package:
        type: "string"
        description: "Required. The package being described."
      version:
        description: "Required. The version of the package being described."
        $ref: "#/definitions/packageVersion"
    description: "The location of the vulnerability."
    example:
      package: "package"
      cpeUri: "cpeUri"
      version:
        inclusive: true
        kind: {}
        name: "name"
        epoch: 6
        revision: "revision"
  body:
    type: "object"
    required:
    - "notes"
    properties:
      notes:
        type: "object"
        description: "The notes to create, the key is expected to be the note ID.\
          \ Max allowed length is 1000."
        additionalProperties:
          $ref: "#/definitions/v1beta1Note"
    description: "Request to create notes in batch."
  body_1:
    type: "object"
    required:
    - "occurrences"
    properties:
      occurrences:
        type: "array"
        description: "The occurrences to create. Max allowed length is 1000."
        items:
          $ref: "#/definitions/v1beta1Occurrence"
    description: "Request to create occurrences in batch."
